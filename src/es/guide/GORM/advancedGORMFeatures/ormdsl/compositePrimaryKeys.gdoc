
{hidden}

GORM supports the concept of composite identifiers (identifiers composed from 2 or more properties). It is not an approach we recommend, but is available to you if you need it:

{code:java}
import org.apache.commons.lang.builder.HashCodeBuilder

class Person implements Serializable {

    String firstName
    String lastName

    boolean equals(other) {
        if (!(other instanceof Person)) {
            return false
        }

        other.firstName == firstName && other.lastName == lastName
    }

    int hashCode() {
        def builder = new HashCodeBuilder()
        builder.append firstName
        builder.append lastName
        builder.toHashCode()
    }

    static mapping = {
        id composite: ['firstName', 'lastName']
    }
}
{code}
{hidden}

GORM apoya el concepto de identificadores compuestos (identificadores compuestos de 2 o más propiedades). No es un enfoque que recomiendo, pero está disponible para usted si es necesario:

{code: java}
org.apache.commons.lang.builder.HashCodeBuilder de importación

clase persona implementa {Serializable

Cadena firstName
    Cadena lastName

booleano equals(other) {}
        Si (! ()otro instanceof persona)) {}
            return false
        }

Other.FirstName == firstName

{hidden}


The above will create a composite id of the @firstName@ and @lastName@ properties of the Person class. To retrieve an instance by id you use a prototype of the object itself:

{code:java}
def p = Person.get(new Person(firstName: "Fred", lastName: "Flintstone"))
println p.firstName
{code}

Domain classes mapped with composite primary keys must implement the @Serializable@ interface and override the @equals@ and @hashCode@ methods, using the properties in the composite key for the calculations. The example above uses a @HashCodeBuilder@ for convenience but it's fine to implement it yourself.

{hidden}

Lo anterior será crear un id compuesto de @ firstName @ y @ lastName @ propiedades de la clase de persona. Para recuperar una instancia por id utiliza un prototipo del propio objeto:

{code: java}
Def p = Person.get (nueva persona (firstName: "Fred", apellido: "Picapiedra"))
Console.println p.firstName
{code}

Clases de dominio asignadas con las claves principales compuestas deben implementar Serializable @ @ interfaz y reemplazar la @ equivale a @ y @ código hash @ métodos, utilizando las propiedades de la clave compuesta para los cálculos. El ejemplo anterior utiliza un @ HashCodeBuilder @ para comodidad pero está bien aplicarlo mismo.

{hidden}

Another important consideration when using composite primary keys is associations. If for example you have a many-to-one association where the foreign keys are stored in the associated table then 2 columns will be present in the associated table.

For example consider the following domain class:

{code}
class Address {
    Person person
}
{code}

{hidden}

Otra consideración importante al utilizar claves principales compuestas es asociaciones. Si por ejemplo tiene una asociación de muchos a uno donde las claves externas se almacenan en la tabla asociada 2 columnas estará presentes en la tabla asociada.

Por ejemplo, considere la siguiente clase de dominio:

{code}
clase {dirección
    Persona
}
{code}

{hidden}

In this case the @address@ table will have an additional two columns called @person_first_name@ and @person_last_name@. If you wish the change the mapping of these columns then you can do so using the following technique:

{code}
class Address {
    Person person
    static mapping = {
        person {
            column: "FirstName"
            column: "LastName"
        }
    }
}
{code}
{hidden}

En este caso la dirección @ @ tabla tendrá un dos columnas adicionales llamado @ person_first_name @ y @ person_last_name @. Si lo desea el cambio en la asignación de estas columnas, a continuación, puede hacerlo mediante la siguiente técnica:

{code}
clase {dirección
    Persona
    asignación estática = {}
        persona {}
            columna: "FirstName"
            columna: "LastName"
        }
    }
}
{code}
