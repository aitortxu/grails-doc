
{hidden}

A derived property is one that takes its value from a SQL expression, often but not necessarily based on the value of one or more other persistent properties.  Consider a Product class like this:

{code:java}
class Product {
    Float price
    Float taxRate
    Float tax
}
{code}

{hidden}

Una propiedad derivada es uno que toma el valor de una expresión SQL, a menudo, pero no necesariamente se basa en el valor de una o varias otras propiedades persistentes.  Considere la posibilidad de una clase de producto como este:

{code: java}
clase producto {}
    Precio flotante
    Float taxRate
    Float impuesto
}
{code}

{hidden}

If the @tax@ property is derived based on the value of @price@ and @taxRate@ properties then is probably no need to persist the @tax@ property.  The SQL used to derive the value of a derived property may be expressed in the ORM DSL like this:

{code:java}
class Product {
    Float price
    Float taxRate
    Float tax

    static mapping = {
        tax formula: 'PRICE * TAX_RATE'
    }
}
{code}
{hidden}

Si el impuesto @ @ propiedad deriva basándose en el valor de @ precio @ y @ taxRate @ propiedades entonces es probablemente necesario para conservar el impuesto @ @ propiedad.  El SQL utilizado para obtener el valor de una propiedad derivado puede expresarse en el DSL ORM como este:

{code: java}
clase producto {}
    Precio flotante
    Float taxRate
    Float impuesto

asignación estática = {}
        fórmula de impuestos: ' precio * TAX_RATE'
    }
}
{code}

{hidden}


Note that the formula expressed in the ORM DSL is SQL so references to other properties should relate to the persistence model not the object model, which is why the example refers to @PRICE@ and @TAX_RATE@ instead of @price@ and @taxRate@.

With that in place, when a Product is retrieved with something like @Product.get(42)@, the SQL that is generated to support that will look something like this:

{code}
select
    product0_.id as id1_0_,
    product0_.version as version1_0_,
    product0_.price as price1_0_,
    product0_.tax_rate as tax4_1_0_,
    product0_.PRICE * product0_.TAX_RATE as formula1_0_
from
    product product0_
where
    product0_.id=?
{code}
{hidden}

Tenga en cuenta que la fórmula expresada en el DSL ORM SQL tan referencias a otras propiedades debe relacionarse con el modelo de persistencia no el modelo de objetos, razón por la cual el ejemplo se refiere al precio @ @ y @ TAX_RATE @ en vez de @ precio @ y @ taxRate @.

Con ese lugar, cuando un producto es obtenido con algo parecido a @ Product.get(42) @, la instrucción SQL que se genera para admitir será algo como esto:

{code}
Seleccione
    product0_.ID como id1_0_,
    product0_.Version como version1_0_,
    product0_.Price como price1_0_,
    product0_.tax_rate como tax4_1_0_,
    product0_.PRECIO * product0_.TAX_RATE como formula1_0_
De
    producto product0_
donde
    ¿product0_.ID =?
{code}

{hidden}


Since the @tax@ property is derived at runtime and not stored in the database it might seem that the same effect could be achieved by adding a method like @getTax()@ to the @Product@ class that simply returns the product of the @taxRate@ and @price@ properties.  With an approach like that you would give up the ability query the database based on the value of the @tax@ property.  Using a derived property allows exactly that.  To retrieve all @Product@ objects that have a @tax@ value greater than 21.12 you could execute a query like this:

{code:java}
Product.findAllByTaxGreaterThan(21.12)
{code}

Derived properties may be referenced in the Criteria API:

{code:java}
Product.withCriteria {
    gt 'tax', 21.12f
}
{code}
{hidden}

Ya el fiscal @ @ propiedad es derivado en tiempo de ejecución y no se almacenan en la base de datos puede parecer que el mismo efecto podría lograrse mediante la adición de un método como @ getTax() @ al producto @ @ clase simplemente devuelve el producto de la @ taxRate @ y @ precio @ propiedades.  Con un enfoque como el daría la consulta capacidad la base de datos basada en el valor del impuesto @ @ propiedad.  Utilizando una propiedad derivada permite exactamente eso.  Para recuperar todos @ producto @ objetos que tienen un impuesto @ @ valor mayor 21.12 podría ejecutar una consulta como ésta:

{code: java}
Product.findAllByTaxGreaterThan(21.12)
{code}

Pueden hacer referencia a propiedades derivadas de la API de criterios:

{code: java}
Product.withCriteria {}
    gt 'impuesto', 21.12f
}
{code}

{hidden}


The SQL that is generated to support either of those would look something like this:

{code}
select
    this_.id as id1_0_,
    this_.version as version1_0_,
    this_.price as price1_0_,
    this_.tax_rate as tax4_1_0_,
    this_.PRICE * this_.TAX_RATE as formula1_0_
from
    product this_
where
    this_.PRICE * this_.TAX_RATE>?
{code}
{hidden}

La instrucción SQL que se genera para apoyar a cualquiera de ellos sería algo así:

{code}
Seleccione
    this_.ID como id1_0_,
    this_.Version como version1_0_,
    this_.Price como price1_0_,
    this_.tax_rate como tax4_1_0_,
    this_.PRECIO * this_.TAX_RATE como formula1_0_
De
    producto this_
donde
    this_.PRECIO * this_.¿TAX_RATE >?
{code}

{hidden}


{note}
Because the value of a derived property is generated in the database and depends on the execution of SQL code, derived properties may not have GORM constraints applied to them.  If constraints are specified for a derived property, they will be ignored.
{note}
{hidden}

{Nota}
Porque el valor de una propiedad derivado se genera en la base de datos y depende de la ejecución de código SQL, propiedades derivadas no tengan restricciones GORM aplicadas a ellos.  Si se especifican restricciones para una propiedad derivada, se omitirán.
{Nota}
