
{hidden}

Grails' command line system is built on [Gant|http://gant.codehaus.org/] - a simple Groovy wrapper around [Apache Ant|http://ant.apache.org].

However, Grails takes it further through the use of convention and the @grails@ command. When you type:

{code}
grails [command name]
{code}

Grails searches in the following directories for Gant scripts to execute:

{hidden}

Sistema de línea de comandos de Grails se basa en [Gant|http://gant.codehaus.org/] - un simple contenedor Groovy [Apache Ant|http://ant.apache.org].

Sin embargo, Grails toma aún más mediante el uso de la Convención y el @ grails @ comando. Cuando escribe:

{code}
Grails [nombre de comando]
{code}

Búsquedas de Grails en los siguientes directorios Gant secuencias de comandos ejecutar:

{hidden}

* @USER_HOME/.grails/scripts@
* @PROJECT_HOME/scripts@
* @PROJECT_HOME/plugins/*/scripts@
* @GRAILS_HOME/scripts@

Grails will also convert command names that are in lower case form such as run-app into camel case. So typing

{code}
grails run-app
{code}
{hidden}

* @USER_HOME/.grails/scripts@
* @ PROJECT_HOME/scripts @
* @ PROJECT_HOME/plugins / * / scripts @
* @ GRAILS_HOME/scripts @

Grails también convertir nombres de comando que se encuentran en forma de minúsculas como run-app en caso de camello. Por lo tanto escribir

{code}
Grails run-app
{code}

{hidden}


Results in a search for the following files:

* @USER_HOME/.grails/scripts/RunApp.groovy@
* @PROJECT_HOME/scripts/RunApp.groovy@
* @PLUGINS_HOME/*/scripts/RunApp.groovy@
* @GLOBAL_PLUGINS_HOME/*/scripts/RunApp.groovy@
* @GRAILS_HOME/scripts/RunApp.groovy@

If multiple matches are found Grails will give you a choice of which one to execute.
{hidden}

Resultados en la búsqueda de los archivos siguientes:

* @USER_HOME/.grails/scripts/RunApp.groovy@
* @PROJECT_HOME/scripts/RunApp.groovy@
* @PLUGINS_HOME/*/scripts/RunApp.groovy@
* @GLOBAL_PLUGINS_HOME/*/scripts/RunApp.groovy@
* @GRAILS_HOME/scripts/RunApp.groovy@

Si coincide con múltiples se encuentran que Grails le dará una opción de que se ejecute.

{hidden}


When Grails executes a Gant script, it invokes the "default" target defined in that script. If there is no default, Grails will quit with an error.

To get a list of all commands and some help about the available commands type:

{code}
grails help
{code}

which outputs usage instructions and the list of commands Grails is aware of:
{hidden}

Cuando Grails se ejecuta una secuencia de comandos de Gant, invoca el destino de "por defecto" definido en la secuencia de comandos. Si no hay ningún valor predeterminado, Grails se cerrará con un error.

Para obtener una lista de todos los comandos y alguna ayuda acerca del tipo de comandos disponibles:

{code}
Grails ayuda
{code}

que genera las instrucciones de uso y la lista de comandos Grails es consciente de:

{hidden}


{code}
Usage (optionals marked with *):
grails [environment]* [target] [arguments]*

Examples:
grails dev run-app
grails create-app books

Available Targets (type grails help 'target-name' for more info):
grails bootstrap
grails bug-report
grails clean
grails compile
...
{code}
{hidden}

{code}
Uso (opcionales marcan con *):
Grails [entorno] * [destino] [argumentos] *

Ejemplos:
dev de Grails run-app
libros de crear aplicaciones Grails

Destinos disponibles (tipo grails ayuda 'nombre de destino"para obtener más información):
Grails bootstrap
informe de error de Grails
Grails limpios
compilación de Grails
...
{code}

{hidden}


{note}
Refer to the Command Line reference in the Quick Reference menu of the reference guide for more information about individual commands
{note}

It's often useful to provide custom arguments to the JVM when running Grails commands, in particular with @run-app@ where you may for example want to set a higher maximum heap size. The Grails command will use any JVM options provided in the general @JAVA_OPTS@ environment variable, but you can also specify a Grails-specific environment variable too:

{code}
export GRAILS_OPTS="-Xmx1G -Xms256m -XX:MaxPermSize=256m"
grails run-app
{code}
{hidden}

{Nota}
Consulte la referencia de línea de comandos en el menú de referencia rápida de la Guía de referencia para obtener más información acerca de los comandos individuales
{Nota}

A menudo resulta útil proporcionar argumentos personalizados para la JVM al ejecutar comandos de Grails, en particular con @ run-app @ donde por ejemplo puede definir el tamaño máximo de almacenamiento dinámico superior. El comando Grails utilizará cualquier opción de JVM en general @ JAVA_OPTS @ variable de entorno, pero también puede especificar una variable de entorno Grails específicos:

{code}
exportar GRAILS_OPTS = "- Xmx1G - Xms256m - XX: MaxPermSize = 256 m"
Grails run-app
{code}

{hidden}


h4. non-interactive mode

When you run a script manually and it prompts you for information, you can answer the questions and continue running the script. But when you run a script as part of an automated process, for example a continuous integration build server, there's no way to "answer" the questions. So you can pass the @\-\-non-interactive@ switch to the script command to tell Grails to accept the default answer for any questions, for example whether to install a missing plugin.

For example:

{code}
grails war --non-interactive
{code}
{hidden}

h4. modo no interactivo

Cuando se ejecuta una secuencia de comandos manualmente y le solicita información, puede responder a las preguntas y continuar ejecutando la secuencia de comandos. Pero cuando se ejecuta una secuencia de comandos como parte de un proceso automatizado, por ejemplo un servidor de compilación de integración continua, no hay manera para "responder" a las preguntas. Por lo que puede pasar el interruptor de @ \-\-non-interactive@ a la secuencia de comandos para decirle Grails para aceptar la respuesta predeterminada para cualquier pregunta, por ejemplo si se va a instalar un plugin de falta.

Por ejemplo:

{code}
Guerra de Grails--no interactiva
{code}
