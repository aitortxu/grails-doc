
{hidden}

If all the other projects in your team or company are built using a standard build tool such as Ant or Maven, you become the black sheep of the family when you use the Grails command line to build your application. Fortunately, you can easily integrate the Grails build system into the main build tools in use today (well, the ones in use in Java projects at least).

h3. Ant Integration

When you create a Grails application with the [create-app|commandLine] command, Grails doesn't automatically create an Ant @build.xml@ file but you can generate one with the [integrate-with|commandLine] command:

bc.
grails integrate-with --ant

This creates a @build.xml@ file containing the following targets:
{hidden}

Si todos los proyectos en su equipo o empresa se crean utilizando una herramienta de generación estándar como Ant o Maven, ser la oveja negra de la familia cuando se utiliza la línea de comandos de Grails para generar la aplicación. Afortunadamente, se puede integrar fácilmente el sistema de compilación de Grails en las principales herramientas en uso hoy en día (bueno, los de utilizan en proyectos Java al menos).

h3. Integración de hormiga

Cuando se crea una aplicación Grails con el comando [crear-app|commandLine], Grails no puede crear automáticamente un archivo de @build.xml@ de hormiga pero puede generar uno con el comando [integrar-with|commandLine]:

a c..
Grails integrar-con--hormiga

Esto crea un archivo @build.xml@ que contiene los siguientes objetivos:

{hidden}


* @clean@ - Cleans the Grails application
* @compile@ - Compiles your application's source code
* @test@ - Runs the unit tests
* @run@ - Equivalent to "grails run-app"
* @war@ - Creates a WAR file
* @deploy@ - Empty by default, but can be used to implement automatic deployment

Each of these can be run by Ant, for example:

{hidden}

* @ clean @ - limpia la aplicación Grails
* @ compilación @ - compila el código fuente de la aplicación
* @ prueba @ - ejecuta las pruebas unitarias
* @ ejecutar @ - equivalente a "grails run-app"
* @ Guerra @ - crea un archivo WAR
* @ desplegar @ - vacío de forma predeterminada, pero puede utilizarse para implementar la implementación automática

Cada una de ellas puede ejecutar por hormigas, por ejemplo:

{hidden}

{code:java}
ant war
{code}

The build file is configured to use "Apache Ivy":http://ant.apache.org/ivy/ for dependency management, which means that it will automatically download all the requisite Grails JAR files and other dependencies on demand. You don't even have to install Grails locally to use it! That makes it particularly useful for continuous integration systems such as [CruiseControl|http://cruisecontrol.sourceforge.net/] or [Jenkins|http://jenkins-ci.org/].

It uses the Grails [Ant task|api:grails.ant.GrailsTask] to hook into the existing Grails build system. The task lets you run any Grails script that's available, not just the ones used by the generated build file. To use the task, you must first declare it:
{code}
<taskdef name="grailsTask"
         classname="grails.ant.GrailsTask"
         classpathref="grails.classpath"/>
{code}
{hidden}

{code: java}
Guerra de hormiga
{code}

El archivo build está configurado para utilizar "Apache Ivy":http://ant.apache.org/ivy/ para la gestión de la dependencia, lo que significa que se descargue automáticamente todos los Grails necesarios JAR archivos y otras dependencias de la demanda. Ni siquiera es necesario instalar Grails localmente a usarlo! Esto hace que sea particularmente útil para los sistemas de integración continua como [CruiseControl|http://cruisecontrol.sourceforge.net/] o [Jenkins|http://jenkins-ci.org/].

Utiliza los Grails [Ant task|api:grails.ant.GrailsTask] para enganchar en el sistema de compilación de Grails existente. La tarea le permite ejecutar cualquier secuencia de Grails que está disponible, no sólo a las utilizadas por el archivo build generado. Para utilizar la tarea, debe declararlo primero:
{code}
<taskdef name="grailsTask" classname="grails.ant.GrailsTask" classpathref="grails.classpath"></taskdef>
{code}

{hidden}


This raises the question: what should be in "grails.classpath"? The task itself is in the "grails-bootstrap" JAR artifact, so that needs to be on the classpath at least. You should also include the "groovy-all" JAR. With the task defined, you just need to use it! The following table shows you what attributes are available:
{table}
 Attribute | Description | Required
 home | The location of the Grails installation directory to use for the build. | Yes, unless classpath is specified.
 classpathref | Classpath to load Grails from. Must include the "grails-bootstrap" artifact and should include "grails-scripts". | Yes, unless @home@ is set or you use a @classpath@ element.
 script | The name of the Grails script to run, e.g. "TestApp". | Yes.
 args | The arguments to pass to the script, e.g. "-unit -xml". | No. Defaults to "".
 environment | The Grails environment to run the script in. | No. Defaults to the script default.
 includeRuntimeClasspath | Advanced setting: adds the application's runtime classpath to the build classpath if true. | No. Defaults to @true@.
{hidden}

Esto plantea la pregunta: ¿qué debe incluir "grails.classpath"? La propia tarea es en el artefacto JAR "grails-bootstrap", por lo debe ser por lo menos en la ruta de clases. También debe incluir el tarro "groovy todos". Con las tareas definidas, sólo necesita utilizarla! La siguiente tabla muestra qué atributos están disponibles:
tabla de {}
 Atributo | Descripción | Obligatorio
 Inicio | La ubicación del directorio de instalación de Grails para la compilación. | Sí, salvo que se especifique la ruta de clases.
 classpathref | Classpath para Grails de la carga. Debe incluir el artefacto "grails-bootstrap" y debe incluir "grails-scripts". | Sí, a menos que @ home @ es conjunto o utilizar un classpath @ @ elemento.
 secuencia de comandos | El nombre de la secuencia de Grails para ejecutar, por ejemplo, "TestApp". | Sí.
 args | Los argumentos que se pasan a la secuencia de comandos, por ejemplo, "-unidad - xml". | No. Valor por defecto es "".
 medio ambiente | El entorno de Grails para ejecutar el script. | No. El valor predeterminado es el valor predeterminado de secuencia de comandos.
 includeRuntimeClasspath | Avanzada configuración: agrega classpath de tiempo de ejecución de la aplicación a la ruta de clases de compilación si es cierto. | No. El valor predeterminado es true @ @.

{hidden}

{table}

The task also supports the following nested elements, all of which are standard Ant path structures:

* @classpath@ - The build classpath (used to load Gant and the Grails scripts).
* @compileClasspath@ - Classpath used to compile the application's classes.
* @runtimeClasspath@ - Classpath used to run the application and package the WAR. Typically includes everything in @compileClasspath.
* @testClasspath@ - Classpath used to compile and run the tests. Typically includes everything in @runtimeClasspath@.

How you populate these paths is up to you. If you use the @home@ attribute and put your own dependencies in the @lib@ directory, then you don't even need to use any of them. For an example of their use, take a look at the generated Ant build file for new apps.
{hidden}

tabla de {}

La tarea también es compatible con los siguientes elementos anidados, todos los cuales son estructuras de ruta Ant estándar:

* @ classpath @ - classpath generación (utilizado para cargar Gant y las secuencias de comandos de Grails).
* @ compileClasspath @ - Classpath utilizada para compilar las clases de la aplicación.
* @ runtimeClasspath @ - Classpath utilizado para ejecutar la aplicación y la guerra del paquete. Por lo general incluye todo en @ compileClasspath.
* @ testClasspath @ - Classpath utilizada para compilar y ejecutar las pruebas. Por lo general incluye todo en @ runtimeClasspath @.

Cómo se llena de estas rutas depende de usted. Si utiliza el hogar @ @ atributo y poner sus propias dependencias de la lib @ @ directorio, entonces aún no necesita utilizar cualquiera de ellos. Un ejemplo de su uso, echar un vistazo el archivo generado de compilación de Ant para nuevas aplicaciones.

{hidden}


h3. Maven Integration

Grails provides integration with "Maven 2":http://maven.apache.org with a Maven plugin. The current Maven plugin is based on but supersedes the version created by [Octo|http://forge.octo.com/], who did a great job with the original.

h4. Preparation

In order to use the new plugin, all you need is Maven 2 installed and set up. This is because *you no longer need to install Grails separately to use it with Maven!*

{note}
{hidden}

h3. Integración de Maven

Grails proporciona integración con "Maven 2":http://maven.apache.org con un plugin de Maven. El plugin Maven actual se basa en pero reemplaza la versión creada por [Octo|http://forge.octo.com/], quien hizo un gran trabajo con el original.

h4. Preparación

Para poder utilizar el nuevo plugin, todo lo que necesita es Maven 2 instalado y configurado. Esto es porque * ya no necesita instalar Grails por separado para usar con Maven! *

{Nota}

{hidden}

The Maven 2 integration for Grails has been designed and tested for Maven 2.0.9 and above. It will not work with earlier versions.
{note}

{note}
The default mvn setup DOES NOT supply sufficient memory to run the Grails environment. We recommend that you add the following environment variable setting to prevent poor performance:

@export MAVEN_OPTS="-Xmx512m -XX:MaxPermSize=256"@
{note}

h4. Creating a Grails Maven Project
{hidden}

La integración de Maven 2 para Grails ha sido diseñada y probado para Maven 2.0.9 y superiores. No funciona con versiones anteriores.
{Nota}

{Nota}
La configuración predeterminada mvn no suministrar suficiente memoria para ejecutar el entorno Grails. Le recomendamos que agregue la variable de entorno siguiente configuración para evitar malos resultados:

exportación de @ MAVEN_OPTS = "-Xmx512m - XX: MaxPermSize = 256" @
{Nota}

h4. Crear un proyecto de Maven Grails

{hidden}


To create a Mavenized Grails project simply run the following command:

{code}
mvn archetype:generate -DarchetypeGroupId=org.grails \\\
    -DarchetypeArtifactId=grails-maven-archetype \\\
    -DarchetypeVersion=1.3.2 \\\
    -DgroupId=example -DartifactId=my-app
{code}

{hidden}

Para crear un proyecto Grails Mavenized simplemente ejecute el siguiente comando:

{code}
arquetipo mvn: generar - DarchetypeGroupId=org.grails \\\
    -DarchetypeArtifactId = grails-maven-arquetipo \\\
    -DarchetypeVersion = 1.3.2 \\\
    -DgroupId = ejemplo - DartifactId = my app
{code}

{hidden}

Choose whichever grails version, group ID and artifact ID you want for your application, but everything else must be as written. This will create a new Maven project with a POM and a couple of other files. What you won't see is anything that looks like a Grails application. So, the next step is to create the project structure that you're used to.
But first, to set target JDK to Java 6, do that now. Open my-app/pom.xml and change
{code}
<plugin>
  <artifactId>maven-compiler-plugin</artifactId>
  <configuration>
    <source>1.5</source>
    <target>1.5</target>
  </configuration>
</plugin>
{code}
{hidden}

Elija cualquier versión de grails, identificador de grupo y artefacto que desee para su aplicación, pero todo lo demás debe ser escrita. Esto creará un nuevo proyecto Maven con un POM y un par de otros archivos. Lo que ves no es nada que se parezca a una aplicación Grails. Por lo tanto, el siguiente paso es crear la estructura del proyecto que usted está acostumbrado.
Pero en primer lugar, para definir el destino JDK en Java 6, hacerlo ahora. Abrir mi-app/pom.xml y cambiar
{code}
<plugin> <artifactid>Maven plugin de compilador</artifactid><configuration><source>1.5</source><target>1.5</target> 
    
    
  </configuration> 
  
  
</plugin>
{code}

{hidden}

to
{code}
<plugin>
  <artifactId>maven-compiler-plugin</artifactId>
  <configuration>
    <source>1.6</source>
    <target>1.6</target>
  </configuration>
</plugin>
{code}
{hidden}

Para
{code}
<plugin> <artifactid>Maven plugin de compilador</artifactid><configuration><source>1.6</source><target>1.6</target> 
    
    
  </configuration> 
  
  
</plugin>
{code}

{hidden}


Then you're ready to create the project structure:

{code}
cd my-app
mvn initialize
{code}

{note}
if you see a message similar to this:
{hidden}

Entonces estará listo para crear la estructura del proyecto:

{code}
CD my-app
mvn inicializar
{code}

{Nota}
Si aparece un mensaje similar al siguiente:

{hidden}


{code}
Resolving plugin JAR dependencies ...
:: problems summary ::
:::: WARNINGS
        module not found: org.hibernate#hibernate-core;3.3.1.GA
{code}

you need to add the plugins manually to application.properties:

{hidden}

{code}
Resolver las dependencias JAR de plugin...
:: problemas Resumen::
:::: ADVERTENCIAS
        módulo no encontrado: org.hibernate

{hidden}

{code}
plugins.hibernate=2.0.0
plugins.tomcat=2.0.0
{code}

then run

{code}
mvn compile
{code}
{hidden}

{code}
plugins.Hibernate=2.0.0
plugins.Tomcat=2.0.0
{code}

a continuación, ejecute

{code}
mvn compile
{code}

{hidden}


and the hibernate and tomcat plugins will be installed.
{note}

Now you have a Grails application all ready to go. The plugin integrates into the standard build cycle, so you can use the standard Maven phases to build and package your app:  @mvn clean@ ,  @mvn compile@ ,  @mvn test@ ,  @mvn package@ , @mvn install@ .

You can also use some of the Grails commands that have been wrapped as Maven goals:

* @grails:create-controller@ - Calls the [create-controller|commandLine] command
* @grails:create-domain-class@ - Calls the [create-domain-class|commandLine] command
{hidden}

y se instalarán los plugins de hibernación y tomcat.
{Nota}

Ahora tienes una aplicación Grails todo lista para ir. El plugin se integra en el ciclo de generación estándar, para que pueda utilizar las fases Maven estándar para construir y empaquetar su aplicación: @ mvn limpio @, @ mvn compile @, @ mvn prueba @, @ mvn paquete @, @ mvn instalar.

También puede utilizar algunos de los comandos de Grails han sido envuelto como objetivos Maven:

* @ grails: controlador de crear @ - llame al comando [crear-controller|commandLine]
* @ grails: crear-dominio-clase @ - llame al comando [crear-dominio-class|commandLine]

{hidden}

* @grails:create-integration-test@ - Calls the [create-integration-test|commandLine] command
* @grails:create-pom@ - Creates a new Maven POM for an existing Grails project
* @grails:create-script@ - Calls the [create-script|commandLine] command
* @grails:create-service@ - Calls the [create-service|commandLine] command
* @grails:create-taglib@ - Calls the [create-tag-lib|commandLine] command
* @grails:create-unit-test@ - Calls the [create-unit-test|commandLine] command
* @grails:exec@ - Executes an arbitrary Grails command line script
* @grails:generate-all@ - Calls the [generate-all|commandLine] command
* @grails:generate-controller@  - Calls the [generate-controller|commandLine] command
* @grails:generate-views@ - Calls the [generate-views|commandLine] command
{hidden}

* @ grails: crear integración prueba-@ - llame al comando [crear-integración-test|commandLine]
* @ grails: crear-pom @ - crea un nuevo POM Maven para un proyecto existente de Grails
* @ grails: crear script @ - llame al comando [crear-script|commandLine]
* @ grails: crear servicio @ - llame al comando [crear-service|commandLine]
* @ grails: crear taglib @ - llame al comando [crear-etiqueta-lib|commandLine]
* @ grails: crear unidad de prueba-@ - llame al comando [crear-unidad-test|commandLine]
* @ grails: exec @ - ejecuta una secuencia de comandos de línea de comandos arbitrario de Grails
* @ grails: generar todos @ - llame al comando [generar-all|commandLine]
* @ grails: controlador de generar @ - llame al comando [generar-controller|commandLine]
* @ grails: generar vistas @ - llame al comando [generar-views|commandLine]

{hidden}

* @grails:install-plugin@ - Calls the [install-plugin|commandLine] command
* @grails:install-templates@ - Calls the [install-templates|commandLine] command
* @grails:list-plugins@ - Calls the [list-plugins|commandLine] command
* @grails:package@ - Calls the [package|commandLine] command
* @grails:run-app@ - Calls the [run-app|commandLine] command
* @grails:uninstall-plugin@ - Calls the [uninstall-plugin|commandLine] command

For a complete, up to date list, run @mvn grails:help@

h4. Mavenizing an existing project
{hidden}

* @ grails: instalar plugin @ - llame al comando [install-plugin|commandLine]
* @ grails: instalar plantillas @ - llame al comando [install-templates|commandLine]
* @ grails: lista de plugins @ - llame al comando [lista-plugins|commandLine]
* @ grails: paquete - llame al comando [package|commandLine]
* @ grails: run-app @ - llame al comando [run-app|commandLine]
* @ grails: desinstalar plugin @ - llame al comando [desinstalar-plugin|commandLine]

Para una lista completa y actualizada, ejecute grails: ayuda de @ mvn @

h4. Mavenizing un proyecto existente

{hidden}


Creating a new project is great way to start, but what if you already have one? You don't want to create a new project and then copy the contents of the old one over. The solution is to create a POM for the existing project using this Maven command (substitute the version number with the grails version of your existing project):
{code}
mvn org.grails:grails-maven-plugin:1.3.2:create-pom -DgroupId=com.mycompany
{code}
When this command has finished, you can immediately start using the standard phases, such as @mvn package@. Note that you have to specify a group ID when creating the POM.

You may also want to set target JDK to Java 6; see above.

h4. Adding Grails commands to phases
{hidden}

Crear un nuevo proyecto es gran camino iniciar, pero ¿qué sucede si ya tienes uno? No desea crear un nuevo proyecto y, a continuación, copie el contenido de más de un viejo. La solución consiste en crear un POM para el proyecto existente mediante este comando Maven (sustituir la versión número con la versión de grails del proyecto existente):
{code}
mvn org.grails:grails-maven-plugin:1.3.2: crear pom-DgroupId=com.mycompany
{code}
Cuando haya terminado este comando, inmediatamente puede empezar a utilizar las fases estándar, como el paquete de @ mvn @. Tenga en cuenta que debe especificar un ID de grupo al crear el POM.

También puede establecer el destino JDK en Java 6; véase más arriba.

h4. Agregar comandos Grails a fases

{hidden}


The standard POM created for you by Grails already attaches the appropriate core Grails commands to their corresponding build phases, so "compile" goes in the "compile" phase and "war" goes in the "package" phase. That doesn't help though when you want to attach a plugin's command to a particular phase. The classic example is functional tests. How do you make sure that your functional tests (using which ever plugin you have decided on) are run during the "integration-test" phase?

Fear not: all things are possible. In this case, you can associate the command to a phase using an extra "execution" block:
{code:xml}
<plugin>
    <groupId>org.grails</groupId>
    <artifactId>grails-maven-plugin</artifactId>
    <version>1.3.2</version>
    <extensions>true</extensions>
    <executions>
        <execution>
            <goals>
            ...
            </goals>
        </execution>
        <!-- Add the "functional-tests" command to the "integration-test" phase -->
        <execution>
            <id>functional-tests</id>
            <phase>integration-test</phase>
            <goals>
                <goal>exec</goal>
            </goals>
            <configuration>
                <command>functional-tests</command>
            </configuration>
        </execution>
    </executions>
</plugin>
{code}
{hidden}

La norma POM creado por Grails ya atribuye el núcleo adecuado Grails comandos a sus correspondientes construcción fases, por lo que "compilar" va en la fase de "recopilar" y "guerra" va en la fase de "paquete". Aunque eso no ayuda cuando desea adjuntar comando del plugin a una fase concreta. El ejemplo clásico es pruebas funcionales. ¿Cómo asegurarnos de que se ejecutan las pruebas funcionales (utilizando el plugin que ha decidido elegir) durante la fase de "prueba de integración"?

No temáis: todo es posible. En este caso, puede asociar el comando a una fase mediante un bloque adicional "ejecución":
{Código: xml}
<plugin> <groupid>org.grails</groupid><artifactid>grails-maven-plugin</artifactid><version>1.3.2</version><extensions>verdadero</extensions> <executions> <execution><goals>
            ...
            </goals>
            
        </execution> <!-- Add the "functional-tests" command to the "integration-test" phase --> <execution> <id>pruebas funcionales</id><phase>prueba de integración</phase><goals><goal>exec</goal>
                
            </goals><configuration><command>pruebas funcionales</command>
                
            </configuration> 
            
            
            
            
        </execution> 
        
        
        
    </executions> 
    
    
    
    
    
</plugin>
{code}

{hidden}


This also demonstrates the @grails:exec@ goal, which can be used to run any Grails command. Simply pass the name of the command as the @command@ system property, and optionally specify the arguments with the @args@ property:
{code}
mvn grails:exec -Dcommand=create-webtest -Dargs=Book
{code}

h4. Debugging a Grails Maven Project

Maven can be launched in debug mode using the "mvnDebug" command. To launch your Grails application in debug, simply run:

{hidden}

Esto también demuestra la @ grails: exec @ objetivo, que puede utilizarse para ejecutar cualquier comando de Grails. Simplemente pasar el nombre del comando como el comando @ @ propiedad del sistema y opcionalmente especificar los argumentos con los args @ @ propiedad:
{code}
mvn grails: exec - Dcommand = crear webtest - Dargs = libro
{code}

h4. Depuración de un proyecto de Maven Grails

Maven puede ser ejecutado en modo de depuración mediante el comando "mvnDebug". Para iniciar la aplicación Grails en depuración, simplemente ejecute:

{hidden}

{code}
mvnDebug grails:run-app
{code}

The process will be suspended on startup and listening for a debugger on port 8000.

If you need more control of the debugger, this can be specified using the MAVEN_OPTS environment variable, and launch Maven with the default "mvn" command:

{code}
MAVEN_OPTS="-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005"
mvn grails:run-app
{code}
{hidden}

{code}
mvnDebug grails: run-app
{code}

El proceso será suspendido durante el inicio y escucha un depurador en el puerto 8000.

Si necesita más control del depurador, esto puede especificarse mediante la variable de entorno MAVEN_OPTS y lanzar Maven con el comando "mvn" predeterminado:

{code}
MAVEN_OPTS = "-Xdebug - Xrunjdwp: transporte = dt_socket, servidor = y, suspender = y dirección = 5005"
mvn grails: run-app
{code}

{hidden}


h4. Raising issues

If you come across any problems with the Maven integration, please raise a JIRA issue as a sub-task of [GRAILS-3547|http://jira.codehaus.org/browse/GRAILS-3547].
{hidden}

h4. Plantear cuestiones

Si se encuentra con algún problema con la integración de Maven, por favor plantear una cuestión JIRA como una subtarea de [GRAILS-3547|http://jira.codehaus.org/browse/GRAILS-3547].
