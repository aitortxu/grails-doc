
{hidden}

You can create your own Gant scripts by running the [create-script|commandLine] command from the root of your project. For example the following command:

{code}
grails create-script compile-sources
{code}

Will create a script called @scripts/CompileSources.groovy@. A Gant script itself is similar to a regular Groovy script except that it supports the concept of "targets" and dependencies between them:

{code:title=scripts/CompileSources.groovy}
target(default:"The default target is the one that gets executed by Grails") {
    depends(clean, compile)
}

target(clean:"Clean out things") {
    ant.delete(dir:"output")
}

target(compile:"Compile some sources") {
    ant.mkdir(dir:"mkdir")
    ant.javac(srcdir:"src/java", destdir:"output")
}
{code}
{hidden}

Puede crear sus propios scripts de Gant ejecutando el comando [crear-script|commandLine] desde la raíz de su proyecto. Por ejemplo, el siguiente comando:

{code}
Grails crear script compilación fuentes
{code}

Creará un script llamado @ scripts/CompileSources.groovy@. Una secuencia de comandos de Gant sí es similar a una secuencia de comandos Groovy regular excepto que apoya el concepto de "objetivos" y las dependencias entre ellos:

{code:title=scripts/CompileSources.groovy}
destino (por defecto: "el destino por defecto es aquella que es ejecutado por Grails") {}
    Depends(Clean, compile)
}

destino (limpio: "Limpiar las cosas") {}
    Ant.Delete(dir:"Output")
}

destino (compilar: "Compilar algunas fuentes") {}
    Ant.mkdir(dir:"mkdir")
    Ant.javac (srcdir: "src/java", destdir: "salida")
}
{code}

{hidden}


As demonstrated in the script above, there is an implicit @ant@ variable (an instance of @groovy.util.AntBuilder@) that allows access to the [Apache Ant API|http://ant.apache.org/manual/index.html].
{note}
In previous versions of Grails (1.0.3 and below), the variable was @Ant@, i.e. with a capital first letter.
{note}

You can also "depend" on other targets using the @depends@ method demonstrated in the @default@ target above.

h3. The default target

{hidden}

Como se demuestra en el guión anterior, hay una hormiga @ implícita @ variable (una instancia de @ groovy.util.AntBuilder@) que permite el acceso a la [Apache Ant API|http://ant.apache.org/manual/index.html].
{Nota}
En versiones anteriores de Grails (1.0.3 y a continuación), la variable fue @ Ant @, es decir, con una primera letra capital.
{Nota}

Puede también "confiar" en otros destinos mediante la @ depende @ método demostrado en la predeterminada @ @ destino anterior.

h3. El destino por defecto

{hidden}

In the example above, we specified a target with the explicit name "default". This is one way of defining the default target for a script. An alternative approach is to use the @setDefaultTarget()@ method:

{code:title=scripts/CompileSources.groovy}
target("clean-compile": "Performs a clean compilation on the app source") {
    depends(clean, compile)
}

target(clean:"Clean out things") {
    ant.delete(dir:"output")
}

target(compile:"Compile some sources") {
    ant.mkdir(dir:"mkdir")
    ant.javac(srcdir:"src/java", destdir:"output")
}

setDefaultTarget("clean-compile")
{code}
{hidden}

En el ejemplo anterior, especificamos un destino con el nombre explícito "predeterminado". Esta es una manera de definir el destino por defecto para una secuencia de comandos. Un método alternativo consiste en utilizar el @ setDefaultTarget() @ método:

{code:title=scripts/CompileSources.groovy}
destino ("compilación limpia": "Realiza una compilación limpia en el origen de la app") {}
    Depends(Clean, compile)
}

destino (limpio: "Limpiar las cosas") {}
    Ant.Delete(dir:"Output")
}

destino (compilar: "Compilar algunas fuentes") {}
    Ant.mkdir(dir:"mkdir")
    Ant.javac (srcdir: "src/java", destdir: "salida")
}

setDefaultTarget("clean-compile")
{code}

{hidden}


This lets you call the default target directly from other scripts if you wish. Also, although we have put the call to @setDefaultTarget()@ at the end of the script in this example, it can go anywhere as long as it comes _after_ the target it refers to ("clean-compile" in this case).

Which approach is better? To be honest, you can use whichever you prefer - there don't seem to be any major advantages in either case. One thing we would say is that if you want to allow other scripts to call your "default" target, you should move it into a shared script that doesn't have a default target at all. We'll talk some more about this in the next section.
{hidden}

Esto le permite llamar el destino por defecto directamente desde otros scripts si lo desea. Además, aunque hemos puesto la llamada a @ setDefaultTarget() @ al final de la secuencia de comandos en este ejemplo, puede ir a cualquier parte siempre y cuando se trata de _after_ el objetivo se refiere a ("clean-compilación" en este caso).

¿Método que es mejor? Para ser honesto, puede utilizar cualquiera prefiere - no parece haber ningún grandes ventajas en cualquiera de los casos. Una cosa que decir es que si desea permitir a otros scripts llamar a su destino "por defecto", debe moverlo a una secuencia de comandos compartido que no tiene un objetivo predeterminado a todos. Hablaremos más acerca de esto en la siguiente sección.
