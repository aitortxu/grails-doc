
{hidden}

h4. Referring to a JNDI DataSource

Most Java EE containers supply @DataSource@ instances via "Java Naming and Directory Interface":http://www.oracle.com/technetwork/java/jndi/index.html (JNDI). Grails supports the definition of JNDI data sources as follows:

{code:java}
dataSource {
    jndiName = "java:comp/env/myDataSource"
}
{code}

{hidden}

h4. Refiriéndose a un origen de datos JNDI

La mayoría de los contenedores J2EE suministro @ DataSource @ instancias a través de "Java Naming and Directory Interface":http://www.oracle.com/technetwork/java/jndi/index.html (JNDI). Grails es compatible con la definición de orígenes de datos JNDI como sigue:

{code: java}
{dataSource
    jndiName = "java: comp/env/MiOrigendeDatos"
}
{code}

{hidden}

The format on the JNDI name may vary from container to container, but the way you define the @DataSource@ in Grails remains the same.

h4. Configuring a Development time JNDI resource

The way in which you configure JNDI data sources at development time is plugin dependent. Using the "Tomcat":http://grails.org/plugin/tomcat plugin you can define JNDI resources using the @grails.naming.entries@ setting in @grails-app/conf/Config.groovy@:

{code}
grails.naming.entries = [
    "bean/MyBeanFactory": [
        auth: "Container",
        type: "com.mycompany.MyBean",
        factory: "org.apache.naming.factory.BeanFactory",
        bar: "23"
    ],
    "jdbc/EmployeeDB": [
        type: "javax.sql.DataSource", //required
        auth: "Container", // optional
        description: "Data source for Foo", //optional
        driverClassName: "org.h2.Driver",
        url: "jdbc:h2:mem:database",
        username: "dbusername",
        password: "dbpassword",
        maxActive: "8",
        maxIdle: "4"
    ],
    "mail/session": [
        type: "javax.mail.Session,
        auth: "Container",
        "mail.smtp.host": "localhost"
    ]
]
{code}
{hidden}

El formato del nombre JNDI puede variar desde un contenedor para contenedores, pero la manera de definir el DataSource @ @ en Grails sigue siendo la misma.

h4. Configuración de un recurso JNDI de tiempo de desarrollo

La forma en que puede configurar orígenes de datos JNDI al tiempo de desarrollo es plugin dependiente. Utilizando la "Tomcat":http://grails.org/plugin/tomcat plugin puede definir recursos JNDI mediante la @grails.naming.entries@ en @ grails-app/conf/Config.groovy@:

{code}
Grails.naming.Entries = [
    "bean/MyBeanFactory": [
        auth: "Contenedor",
        tipo: "com.mycompany.MyBean",
        fábrica: "org.apache.naming.factory.BeanFactory",
        barra: "23"
    ],
    "jdbc/EmployeeDB": [
        tipo: "javax.sql.DataSource", //required
        auth: "Contenedor", / / opcional
        Descripción: "Data source para Foo", //optional
        driverClassName: "org.h2.Driver",
        URL: "jdbc:h2:mem:database",
        nombre de usuario: "dbusername",
        contraseña: "dbpassword",
        maxActive: "8",
        maxIdle: "4"
    ],
    "sesión/mail": [
        tipo: "javax.mail.Session,
        auth: "Contenedor",
        "mail.smtp.host": "localhost"
    ]
]
{code}
