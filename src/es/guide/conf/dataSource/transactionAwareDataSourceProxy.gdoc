
{hidden}

The actual @dataSource@ bean is wrapped in a transaction-aware proxy so you will be given the connection that's being used by the current transaction or Hibernate @Session@ if one is active.

If this were not the case, then retrieving a connection from the @dataSource@ would be a new connection, and you wouldn't be able to see changes that haven't been committed yet (assuming you have a sensible transaction isolation setting, e.g. @READ_COMMITTED@ or better).

The "real" unproxied @dataSource@ is still available to you if you need access to it; its bean name is @dataSourceUnproxied@.

You can access this bean like any other Spring bean, i.e. using dependency injection:

{code}
class MyService {

   def dataSourceUnproxied
   ...
}
{code}
{hidden}

Real dataSource @ @ bean está envuelto en un proxy de transacción consciente por lo que se le dará la conexión que se utiliza en la transacción actual o hibernación @ sesión @ si uno está activo.

Si esto no fuera el caso, entonces recuperar una conexión desde el origen de datos de @ @ sería una nueva conexión, y sería capaz de ver los cambios que no hayan sido comprometidos aún (suponiendo que le tienen un aislamiento de transacción razonable establecer, por ejemplo, @ READ_COMMITTED @ o mejor).

"Real" unproxied @ dataSource @ sigue estando disponible para usted si necesita tener acceso a ella; su nombre de frijol es @ dataSourceUnproxied @.

Se puede acceder a este grano como cualquier otro grano de primavera, es decir, mediante inyección de dependencias:

{code}
clase MyService {}

Def dataSourceUnproxied
   ...
}
{code}

{hidden}


or by pulling it from the @ApplicationContext@:

{code}
def dataSourceUnproxied = ctx.dataSourceUnproxied
{code}
{hidden}

o tirando de la @ perful @:

{code}
Def dataSourceUnproxied = ctx.dataSourceUnproxied
{code}
