
{hidden}

h4. Per Environment Configuration

Grails supports the concept of per environment configuration. The @Config.groovy@, @DataSource.groovy@, and @BootStrap.groovy@ files in the @grails-app/conf@ directory can use per-environment configuration using the syntax provided by "ConfigSlurper":http://groovy.codehaus.org/ConfigSlurper. As an example consider the following default @DataSource@ definition provided by Grails:

{code:java}
dataSource {
    pooled = false
    driverClassName = "org.h2.Driver"
    username = "sa"
    password = ""
}
environments {
    development {
        dataSource {
            dbCreate = "create-drop"
            url = "jdbc:h2:mem:devDb"
        }
    }
    test {
        dataSource {
            dbCreate = "update"
            url = "jdbc:h2:mem:testDb"
        }
    }
    production {
        dataSource {
            dbCreate = "update"
            url = "jdbc:h2:prodDb"
        }
    }
}
{code}
{hidden}

h4. Por la configuración del entorno

Grails es compatible con el concepto de por la configuración del entorno. Los archivos de @ Config.groovy@, @ DataSource.groovy@ y @BootStrap.groovy@ en el @ grails-app/conf @ directorio pueden utilizar configuración de por medio con la sintaxis proporcionada por "ConfigSlurper":http://groovy.codehaus.org/ConfigSlurper. Como ejemplo, considere el siguiente predeterminado @ DataSource @ definición proporcionada por Grails:

{code: java}
{dataSource
    agrupado = false
    driverClassName = "org.h2.Driver"
    username = "sa"
    Password = ""
}
entornos {}
    desarrollo {}
        {dataSource
            dbCreate = "Crear gota"
            URL = "jdbc:h2:mem:devDb"
        }
    }
    prueba {}
        {dataSource
            dbCreate = "Actualizar"
            URL = "jdbc:h2:mem:testDb"
        }
    }
    producción {}
        {dataSource
            dbCreate = "Actualizar"
            URL = "jdbc:h2:prodDb"
        }
    }
}
{code}

{hidden}


Notice how the common configuration is provided at the top level and then an @environments@ block specifies per environment settings for the @dbCreate@ and @url@ properties of the @DataSource@.

h4. Packaging and Running for Different Environments

Grails' [command line|guide:commandLine] has built in capabilities to execute any command within the context of a specific environment. The format is:

{code:java}
grails [environment] [command name]
{code}
{hidden}

Observe cómo la configuración común se proporciona en el nivel superior y, a continuación, especifica un entornos @ bloque @ por valores del entorno de @ dbCreate @ y @ url @ propiedades DataSource @ @.

h4. Embalaje y ejecución para distintos entornos

Grails' [comando line|guide:commandLine] ha construido en la capacidad para ejecutar cualquier comando dentro del contexto de un entorno específico. El formato es:

{code: java}
Grails [entorno] [nombre de comando]
{code}

{hidden}


In addition, there are 3 preset environments known to Grails: @dev@, @prod@, and @test@ for @development@, @production@ and @test@. For example to create a WAR for the @test@ environment you wound run:

{code:java}
grails test war
{code}

To target other environments you can pass a @grails.env@ variable to any command:

{code:java}
grails -Dgrails.env=UAT run-app
{code}
{hidden}

Además, hay 3 entornos preestablecidos conocidos a Grails: @ dev @, @ prod @ y @ prueba @ @ desarrollo @, @ producción @ y @ prueba @. Por ejemplo, para crear una guerra para la prueba @ @ entorno que herida ejecutar:

{code: java}
Grails prueba guerra
{code}

Para otros entornos de destino puede pasar una variable @grails.env@ para cualquier comando:

{code: java}
Grails-Dgrails.env=UAT run-app
{code}

{hidden}


h4. Programmatic Environment Detection

Within your code, such as in a Gant script or a bootstrap class you can detect the environment using the [Environment|api:grails.util.Environment] class:

{code:java}
import grails.util.Environment

...

switch (Environment.current) {
    case Environment.DEVELOPMENT:
        configureForDevelopment()
        break
    case Environment.PRODUCTION:
        configureForProduction()
        break
}
{code}
{hidden}

h4. Detección de medio ambiente mediante programación

Dentro del código, como en un guión de Gant o una clase de arranque se puede detectar el entorno mediante la clase [Environment|api:grails.util.Environment]:

{code: java}
grails.util.Environment de importación

...

Switch (Environment.current) {}
    Case Environment.DEVELOPMENT:
        configureForDevelopment()
        salto
    Case Environment.PRODUCTION:
        configureForProduction()
        salto
}
{code}

{hidden}


h4. Per Environment Bootstrapping

Its often desirable to run code when your application starts up on a per-environment basis. To do so you can use the @grails-app/conf/BootStrap.groovy@ file's support for per-environment execution:

{code}
def init = { ServletContext ctx ->
    environments {
        production {
            ctx.setAttribute("env", "prod")
        }
        development {
            ctx.setAttribute("env", "dev")
        }
    }
    ctx.setAttribute("foo", "bar")
}
{code}
{hidden}

h4. Por medio ambiente Bootstrapping

Sus a menudo deseable para ejecutar código cuando la aplicación se inicia en una base de por medio. Para ello puede utilizar la compatibilidad del archivo @grails-app/conf/BootStrap.groovy@ para su ejecución al entorno:

{code}
init Def = {ServletContext ctx->
    entornos {}
        producción {}
            CTX.SetAttribute ("env", "prod")
        }
        desarrollo {}
            CTX.SetAttribute ("env", "dev")
        }
    }
    CTX.SetAttribute ("foo", "bar")
}
{code}

{hidden}


h4. Generic Per Environment Execution

The previous @BootStrap@ example uses the @grails.util.Environment@ class internally to execute. You can also use this class yourself to execute your own environment specific logic:

{code}
Environment.executeForCurrentEnvironment {
    production {
        // do something in production
    }
    development {
        // do something only in development
    }
}
{code}
{hidden}

h4. Genérico por el entorno de ejecución

La anterior BootStrap @ @ en el ejemplo se utiliza la clase @grails.util.Environment@ internamente para ejecutar. También puede utilizar esta clase para ejecutar su propia lógica específica del entorno:

{code}
Environment.executeForCurrentEnvironment {}
    producción {}
        / / hacer algo en producción
    }
    desarrollo {}
        / / hacer algo sólo en desarrollo
    }
}
{code}
