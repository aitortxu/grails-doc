
{hidden}

Grails features five dependency resolution configurations (or 'scopes'):

*  @build@: Dependencies for the build system only
*  @compile@: Dependencies for the compile step
*  @runtime@: Dependencies needed at runtime but not for compilation (see above)
*  @test@: Dependencies needed for testing but not at runtime (see above)
*  @provided@: Dependencies needed at development time, but not during WAR deployment

Within the @dependencies@ block you can specify a dependency that falls into one of these configurations by calling the equivalent method. For example if your application requires the MySQL driver to function at @runtime@ you can specify that like this:

{hidden}

Grails ofrece cinco configuraciones de resolución de dependencia (o 'ámbitos'):

* @ generación @: dependencias para el sistema de compilación sólo
* @ compilación @: dependencias para el paso de compilación
* @ runtime @: dependencias necesarias en tiempo de ejecución, pero no para la compilación (véase más arriba)
* @ prueba @: dependencias necesarias para las pruebas, pero no en tiempo de ejecución (véase más arriba)
* @ proporcionado: dependencias necesarias en el tiempo de desarrollo, pero no durante la implementación de guerra

Dentro de las dependencias @ bloque @ puede especificar una dependencia que cae en una de estas configuraciones llamando al método equivalente. Por ejemplo, si su aplicación requiere el controlador MySQL funcione en tiempo de ejecución @ @ puede especificar como este:

{hidden}

{code}
runtime 'com.mysql:mysql-connector-java:5.1.16'
{code}

This uses the string syntax: @group:name:version@. You can also use a Map-based syntax:

{code}
runtime group: 'com.mysql',
        name: 'mysql-connector-java',
        version: '5.1.16'
{code}
{hidden}

{code}
tiempo de ejecución ' com.mysql:mysql-conector-java: 5.1.16'
{code}

Esto utiliza la sintaxis de cadena: @ Grupo: nombre: versión @. También puede utilizar una sintaxis basada en mapas:

{code}
Grupo de tiempo de ejecución: 'com.mysql',
        nombre: 'mysql-connector-java',
        versión: '5.1.16'
{code}

{hidden}


In Maven terminology, @group@ corresponds to an artifact's @groupId@ and @name@ corresponds to its @artifactId@.

Multiple dependencies can be specified by passing multiple arguments:

{code}
runtime 'com.mysql:mysql-connector-java:5.1.16',
        'net.sf.ehcache:ehcache:1.6.1'

// Or

runtime(
    [group:'com.mysql', name:'mysql-connector-java', version:'5.1.16'],
    [group:'net.sf.ehcache', name:'ehcache', version:'1.6.1']
)
{code}
{hidden}

En la terminología de Maven, @ group @ corresponde a groupId @ de un artefacto @ y @ nombre @ corresponde a su @ artifactId @.

Varias dependencias pueden especificarse por pasar varios argumentos:

{code}
tiempo de ejecución ' com.mysql:mysql-conector-java: 5.1.16',
        'net.sf.ehcache:ehcache:1.6.1'

/ / O

(tiempo de ejecución
    [group:'com.mysql', nombre: 'mysql-connector-java', versión: '5.1.16'],
    [group:'net.sf.ehcache', nombre: 'ehcache', versión: '1.6.1']
)
{code}

{hidden}


h3. Disabling transitive dependency resolution

By default, Grails will not only get the JARs and plugins that you declare, but it will also get their transitive dependencies. This is usually what you want, but there are occasions where you want a dependency without all its baggage. In such cases, you can disable transitive dependency resolution on a case-by-case basis:

{code}
runtime('com.mysql:mysql-connector-java:5.1.16',
        'net.sf.ehcache:ehcache:1.6.1') {
    transitive = false
}

// Or
runtime group:'com.mysql',
        name:'mysql-connector-java',
        version:'5.1.16',
        transitive:false
{code}
{hidden}

h3. Deshabilitar la resolución de dependencia transitiva

De forma predeterminada, Grails serán no sólo obtener las jarras y plugins que se declaran, sino también recibirán sus dependencias transitivas. Esto suele ser lo que quieras, pero hay ocasiones donde desea una dependencia sin todo su equipaje. En tales casos, puede deshabilitar la resolución de dependencia transitiva sobre una base de caso por caso:

{code}
tiempo de ejecución ('com.mysql:mysql-conector-java: 5.1.16',
        {'net.sf.ehcache:ehcache:1.6.1')
    transitiva = false
}

/ / O
tiempo de ejecución group:'com.mysql',
        nombre: 'mysql-connector-java',
        versión: '5.1.16',
        transitiva: falso
{code}

{hidden}


h3. Excluding specific transitive dependencies

A far more common scenario is where you want the transitive dependencies, but some of them cause issues with your own dependencies or are unnecessary. For example, many Apache projects have 'commons-logging' as a transitive dependency, but it shouldn't be included in a Grails project (we use SLF4J). That's where the @excludes@ option comes in:

{code}
runtime('com.mysql:mysql-connector-java:5.1.16',
        'net.sf.ehcache:ehcache:1.6.1') {
    excludes "xml-apis", "commons-logging"
}

// Or
runtime(group:'com.mysql', name:'mysql-connector-java', version:'5.1.16') {
    excludes([ group: 'xml-apis', name: 'xml-apis'],
             [ group: 'org.apache.httpcomponents' ],
             [ name: 'commons-logging' ])
{code}
{hidden}

h3. Excluyendo las dependencias transitivas específicas

Un escenario mucho más común es donde desea las dependencias transitivas, pero algunos de ellos causan problemas con sus propias dependencias o son innecesarias. Por ejemplo, muchos proyectos de Apache tienen 'commons-tala' como una dependencia transitiva, pero no debería ser incluido en un proyecto Grails (utilizamos SLF4J). Ahí es donde el @ excluye opción viene en:

{code}
tiempo de ejecución ('com.mysql:mysql-conector-java: 5.1.16',
        {'net.sf.ehcache:ehcache:1.6.1')
    excluye "xml-API", "registro de los comunes"
}

/ / O
tiempo de ejecución (Grupo:'com.mysql ', nombre:'mysql-connector-java', versión:'5.1.16 ') {}
    excluye ([grupo: 'API de xml', nombre: 'API de xml'],
             [grupo: 'org.apache.httpcomponents'],
             [nombre: registro de los comunes])
{code}

{hidden}


As you can see, you can either exclude dependencies by their artifact ID (also known as a module name) or any combination of group and artifact IDs (if you use the Map notation). You may also come across @exclude@ as well, but that can only accept a single string or Map:

{code}
runtime('com.mysql:mysql-connector-java:5.1.16',
        'net.sf.ehcache:ehcache:1.6.1') {
    exclude "xml-apis"
}
{code}

{hidden}

Como puede ver, puede excluir las dependencias por su ID de artefacto (también conocido como un nombre de módulo) o cualquier combinación de ID de grupo y artefacto (si se utiliza la notación del mapa). También puede viene a través de @ excluir @ así, pero que sólo puede aceptar una sola cadena o mapa:

{code}
tiempo de ejecución ('com.mysql:mysql-conector-java: 5.1.16',
        {'net.sf.ehcache:ehcache:1.6.1')
    excluir "xml-API"
}
{code}

{hidden}

h3. Using Ivy module configurations

If you use Ivy module configurations and wish to depend on a specific configuration of a module, you can use the @dependencyConfiguration@ method to specify the configuration to use.

{code}
provided("my.org:web-service:1.0") {
    dependencyConfiguration "api"
}
{code}

{hidden}

h3. Utilizando las configuraciones de módulo de Ivy

Si utiliza las configuraciones de módulo de hiedra y deseo a depender de una configuración específica de un módulo, puede utilizar el @ dependencyConfiguration @ método para especificar la configuración para usar.

{code}
provided("My.org:Web-Service:1.0") {}
    dependencyConfiguration "api"
}
{code}

{hidden}

If the dependency configuration is not explicitly set, the configuration named @"default"@ will be used (which is also the correct value for dependencies coming from Maven style repositories).
{hidden}

Si no se establece explícitamente la configuración de la dependencia, la configuración denominada @ "predeterminado" @ se utilizará (que es también el valor correcto para dependencias procedentes de repositorios de estilo Maven).
