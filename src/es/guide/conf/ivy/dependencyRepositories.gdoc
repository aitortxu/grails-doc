
{hidden}

h4. Remote Repositories

Initially your BuildConfig.groovy does not use any remote public Maven repositories. There is a default @grailsHome()@ repository that will locate the JAR files Grails needs from your Grails installation. To use a public repository, specify it in the @repositories@ block:

{code}
repositories {
    mavenCentral()
}
{code}

{hidden}

h4. Repositorios remotos

Inicialmente su BuildConfig.groovy no utilizar los repositorios Maven públicos remotos. Existe un defecto @ grailsHome() @ repositorio que buscará los archivos JAR Grails las necesidades de la instalación de Grails. Para usar un repositorio, especifique en los repositorios @ bloque @:

{code}
{repositorios
    mavenCentral()
}
{code}

{hidden}

In this case the default public Maven repository is specified. To use the SpringSource Enterprise Bundle Repository you can use the @ebr()@ method:

{code}
repositories {
    ebr()
}
{code}

You can also specify a specific Maven repository to use by URL:

{hidden}

En este caso se especifica el repositorio de Maven público predeterminado. Para utilizar el repositorio de paquete empresarial de SpringSource puede utilizar @ ebr() @ método:

{code}
{repositorios
    EBR()
}
{code}

También puede especificar un repositorio Maven específico a utilizar por URL:

{hidden}

{code}
repositories {
    mavenRepo "http://repository.codehaus.org"
}
{code}

h4. Controlling Repositories Inherited from Plugins

A plugin you have installed may define a reference to a remote repository just as an application can. By default your application will inherit this repository definition when you install the plugin.

{hidden}

{code}
{repositorios
    mavenRepo "http://repository.codehaus.org"
}
{code}

h4. Repositorios de control heredados de Plugins

Un plugin que ha instalado puede definir una referencia a un repositorio remoto igual que una aplicación. Por defecto la aplicación heredarán esta definición de repositorio al instalar el plugin.

{hidden}

If you do not wish to inherit repository definitions from plugins then you can disable repository inheritance:

{code:java}
repositories {
    inherit false
}
{code}

In this case your application will not inherit any repository definitions from plugins and it is down to you to provide appropriate (possibly internal) repository definitions.

{hidden}

Si no desea heredar las definiciones de repositorio de plugins puede desactivar herencia del repositorio:

{code: java}
{repositorios
    Heredar falso
}
{code}

En este caso su aplicación no heredará las definiciones de repositorio de plugins y es para proporcionar definiciones adecuadas de repositorio (posiblemente interno).

{hidden}

h4. Local Resolvers

If you do not wish to use a public Maven repository you can specify a flat file repository:

{code}
repositories {
    flatDir name:'myRepo', dirs:'/path/to/repo'
}
{code}

{hidden}

h4. Resoluciones locales

Si no desea usar un repositorio Maven puede especificar un repositorio de archivos planos:

{code}
{repositorios
    flatDir nombre: 'myRepo', directorios: '/ ruta/a/repo'
}
{code}

{hidden}

To specify your local Maven cache (@~/.m2/repository@) as a repository:

{code}
repositories {
    mavenLocal()
}
{code}
h4. Custom Resolvers

If all else fails since Grails builds on Apache Ivy you can specify an Ivy resolver:
{hidden}

Para especificar su memoria caché local de Maven (@~/.m2/repository@) como un repositorio:

{code}
{repositorios
    mavenLocal()
}
{code}
h4. Resoluciones personalizadas

Si todo lo demás falla desde Grails se basa en Apache Ivy puede especificar a una resolución Ivy:

{hidden}


{code}
/*
 * Configure our resolver.
 */
def libResolver = new org.apache.ivy.plugins.resolver.URLResolver()
['libraries', 'builds'].each {

    libResolver.addArtifactPattern(
            "http://my.repository/\${it}/" +
            "[organisation]/[module]/[revision]/[type]s/[artifact].[ext]")

    libResolver.addIvyPattern(
            "http://my.repository/\${it}/" +
            "[organisation]/[module]/[revision]/[type]s/[artifact].[ext]")
}

libResolver.name = "my-repository"
libResolver.settings = ivySettings

resolver libResolver
{code}
{hidden}

{code}
/*
 * Configurar a nuestra resolución.
 */
Def libResolver = new org.apache.ivy.plugins.resolver.URLResolver()
['libraries', 'generaciones'] {.cada

() libResolver.addArtifactPattern
            "http://my.repository/\${it}/" "[Organización] / [module] / [Revisión] / [tipo] s / [artefacto].[ext] ")

() libResolver.addIvyPattern
            "http://my.repository/\${it}/" "[Organización] / [module] / [Revisión] / [tipo] s / [artefacto].[ext] ")
}

libResolver.name = "mi repositorio"
libResolver.settings = ivySettings

resolución libResolver
{code}

{hidden}


It's also possible to pull dependencies from a repository using SSH. Ivy comes with a dedicated resolver that you can configure and include in your project like so:
{code}
import org.apache.ivy.plugins.resolver.SshResolver
...
repositories {
    ...

    def sshResolver = new SshResolver(
            name: "myRepo",
            user: "username",
            host: "dev.x.com",
            keyFile: new File("/home/username/.ssh/id_rsa"),
            m2compatible: true)

    sshResolver.addArtifactPattern(
            "/home/grails/repo/[organisation]/[artifact]/" +
            "[revision]/[artifact]-[revision].[ext]")

    sshResolver.latestStrategy =
            new org.apache.ivy.plugins.latest.LatestTimeStrategy()

    sshResolver.changingPattern = ".*SNAPSHOT"

    sshResolver.setCheckmodified(true)

    resolver sshResolver
}
{code}
{hidden}

También es posible extraer las dependencias de un repositorio mediante SSH. Ivy viene con una resolución dedicada que puede configurar e incluir en el proyecto como tal:
{code}
org.apache.ivy.plugins.resolver.SshResolver de importación
...
{repositorios
    ...

Def sshResolver = new SshResolver ()
            nombre: "myRepo",
            usuario: "username",
            host: "dev.x.com",
            keyFile: nueva File("/home/username/.ssh/id_rsa"),
            m2compatible: true)

() sshResolver.addArtifactPattern
            "/ home/grails/repo / [Organización] / [artefacto] /" "[Revisión] / [artefacto]-[Revisión].[ext] ")

sshResolver.latestStrategy =
            org.apache.ivy.plugins.latest.LatestTimeStrategy() nuevo

sshResolver.changingPattern = ". * instantánea"

sshResolver.setCheckmodified(true)

resolución sshResolver
}
{code}

{hidden}


Download the [JSch|http://www.jcraft.com/jsch/] JAR and add it to Grails' classpath to use the SSH resolver. You can do this by passing the path in the Grails command line:
{code}
grails -classpath /path/to/jsch compile|run-app|etc.
{code}

You can also add its path to the @CLASSPATH@ environment variable but be aware this it affects many Java applications. An alternative on Unix is to create an alias for @grails -classpath ...@ so that you don't have to type the extra arguments each time.

h4. Authentication

{hidden}

Descargar [JSch|http://www.jcraft.com/jsch/] JAR y añadir al classpath de Grails para utilizar a la resolución SSH. Puede hacerlo mediante la aprobación de la ruta en la línea de comandos de Grails:
{code}
Grails - classpath /path/to/jsch compile|run-app|etc.
{code}

También puede agregar su ruta CLASSPATH @ @ variable de entorno pero tenga en cuenta este afecta a muchas aplicaciones de Java. Una alternativa en Unix es crear un alias para @ grails - classpath... @, por lo que no es necesario que escriba los argumentos adicionales cada vez.

h4. Autenticación

{hidden}

If your repository requires authentication you can configure this using a @credentials@ block:

{code}
credentials {
    realm = ".."
    host = "localhost"
    username = "myuser"
    password = "mypass"
}
{code}
{hidden}

Si el repositorio requiere autenticación puede configurar esto utilizando credenciales @ bloque @:

{code}
credenciales {}
    Reino = "..."
    host = "localhost"
    username = "myuser"
    contraseña = "miContraseña –"
}
{code}

{hidden}


This can be placed in your @USER_HOME/.grails/settings.groovy@ file using the @grails.project.ivy.authentication@ setting:

{code}
grails.project.ivy.authentication = {
    credentials {
        realm = ".."
        host = "localhost"
        username = "myuser"
        password = "mypass"
    }
}
{code}
{hidden}

Esto puede ser colocado en el archivo @USER_HOME/.grails/settings.groovy@ mediante la configuración de @grails.project.ivy.authentication@:

{code}
Grails.Project.Ivy.Authentication = {}
    credenciales {}
        Reino = "..."
        host = "localhost"
        username = "myuser"
        contraseña = "miContraseña –"
    }
}
{code}
