
{hidden}

If you use Maven to build your Grails project, you can use the standard Maven targets @mvn install@ and @mvn deploy@.
If not, you can deploy a Grails project or plugin to a Maven repository using the [maven-publisher|http://grails.org/plugin/maven-publisher] plugin.

The plugin provides the ability to publish Grails projects and plugins to local and remote Maven repositories. There are two key additional targets added by the plugin:

* *maven-install* - Installs a Grails project or plugin into your local Maven cache
* *maven-deploy* - Deploys a Grails project or plugin to a remote Maven repository

By default this plugin will automatically generate a valid @pom.xml@ for you unless a @pom.xml@ is already present in the root of the project, in which case this @pom.xml@ file will be used.

{hidden}

Si utiliza a Maven para construir su proyecto Grails, puede utilizar la instalación estándar de Maven objetivos @ mvn @ y @ mvn desplegar.
Si no es así, puede desplegar un proyecto Grails o plugin en un repositorio de Maven utilizando el plugin [maven-publisher|http://grails.org/plugin/maven-publisher].

El plugin permite publicar proyectos Grails y plugins en repositorios Maven locales y remotos. Hay dos principales objetivos adicionales agregados por el plugin:

* * maven-instalación * - instala un plugin o un proyecto Grails en la caché local de Maven
* * maven-desplegar *-implementa un proyecto Grails o plugin para un repositorio Maven remoto

De forma predeterminada este plugin generará automáticamente un @pom.xml@ válido para usted a menos que un @pom.xml@ ya está presente en la raíz del proyecto, en cuyo caso se utilizará este archivo @pom.xml@.

{hidden}

h4. maven-install

The @maven-install@ command will install the Grails project or plugin artifact into your local Maven cache:

{code}
grails maven-install
{code}

In the case of plugins, the plugin zip file will be installed, whilst for application the application WAR file will be installed.

{hidden}

h4. Maven-instalación

El @ maven instalar @ comando instalará el artefacto de proyecto o plugin Grails en la caché local de Maven:

{code}
Grails maven-instalación
{code}

En el caso de plugins, se instalará el archivo zip de plugin, mientras que para la aplicación se instalará el archivo WAR de aplicación.

{hidden}

h4. maven-deploy

The @maven-deploy@ command will deploy a Grails project or plugin into a remote Maven repository:

{code}
grails maven-deploy
{code}

It is assumed that you have specified the necessary @<distributionManagement>@ configuration within a @pom.xml@ or that you specify the @id@ of the remote repository to deploy to:

{hidden}

h4. implementar Maven

Maven @-desplegar comando desplegará un proyecto Grails o plugin en un repositorio de Maven remoto:

{code}
Grails implementación maven
{code}

Se supone que se ha especificado la necesaria @<distributionmanagement>@ Configuración dentro de un @pom.xml@ o especificar el id @ @ del repositorio remoto para desplegar en:
</distributionmanagement>

{hidden}

{code}
grails maven-deploy --repository=myRepo
{code}

The @repository@ argument specifies the 'id' for the repository. Configure the details of the repository specified by this 'id' within your @grails-app/conf/BuildConfig.groovy@ file or in your @$USER_HOME/.grails/settings.groovy@ file:

{code}
grails.project.dependency.distribution = {
    localRepository = "/path/to/my/local"
    remoteRepository(id: "myRepo", url: "http://myserver/path/to/repo")
}
{code}
{hidden}

{code}
Grails implementar maven--repositorio = myRepo
{code}

El repositorio @ @ argumento especifica el 'id' para el repositorio. Configurar los detalles del repositorio especificado por este 'id' en el archivo @grails-app/conf/BuildConfig.groovy@ o en el archivo @$USER_HOME/.grails/settings.groovy@:

{code}
Grails.Project.Dependency.Distribution = {}
    localRepository = "/ ruta/a/mi/local"
    remoteRepository (id: "myRepo", dirección url: "http://myserver/path/to/repo")
}
{code}

{hidden}


The syntax for configuring remote repositories matches the syntax from the [remoteRepository|http://maven.apache.org/ant-tasks/reference.html#remoteRepository] element in the Ant Maven tasks. For example the following XML:

{code}
<remoteRepository id="myRepo" url="scp://localhost/www/repository">
    <authentication username="..." privateKey="\${user.home}/.ssh/id_dsa"/>
</remoteRepository>
{code}

Can be expressed as:
{hidden}

La sintaxis para configurar repositorios remotos coincide con la sintaxis de la [remoteRepository|http://maven.apache.org/ant-tasks/reference.html

{hidden}


{code}
remoteRepository(id: "myRepo", url: "scp://localhost/www/repository") {
    authentication username: "...", privateKey: "\${userHome}/.ssh/id_dsa"
}
{code}

By default the plugin will try to detect the protocol to use from the URL of the repository (ie "http" from "http://.." etc.), however to specify a different protocol you can do:

{code}
grails maven-deploy --repository=myRepo --protocol=webdav
{code}
{hidden}

{code}
remoteRepository (id: "myRepo", dirección url: "scp: / / localhost/www/repositorio") {}
    nombre de usuario de autenticación: "...", cambia: "\${userHome}/.ssh/id_dsa"
}
{code}

De forma predeterminada el plugin intentará detectar el Protocolo a usar desde la URL del repositorio (es decir "http" desde "http://..." etc.), sin embargo para especificar otro protocolo te puede hacer:

{code}
Grails implementar maven--repositorio = myRepo--protocol = webdav
{code}

{hidden}


The available protocols are:

* http
* scp
* scpexe
* ftp
* webdav

h4. Groups, Artifacts and Versions
{hidden}

Los protocolos disponibles son:

* http
* scp
* scpexe
* ftp
* webdav

h4. Versiones, artefactos y grupos

{hidden}


Maven defines the notion of a 'groupId', 'artifactId' and a 'version'. This plugin pulls this information from the Grails project conventions or plugin descriptor.

h5. Projects

For applications this plugin will use the Grails application name and version provided by Grails when generating the @pom.xml@ file. To change the version you can run the @set-version@ command:

{code}
grails set-version 0.2
{code}
{hidden}

Maven define la noción de 'IdGrupo', 'artifactId' y una 'versión'. Este plugin extrae esta información de los convenios de proyecto Grails o descriptor de plugin.

H5. Proyectos

Para las aplicaciones de este plugin utilizará el nombre de la aplicación de Grails y la versión proporcionada por Grails al generar el archivo @pom.xml@. Para cambiar la versión puede ejecutar la @ conjunto-versión @ comando:

{code}
conjunto de Grails-versión 0.2
{code}

{hidden}


The Maven @groupId@ will be the same as the project name, unless you specify a different one in Config.groovy:

{code}
grails.project.groupId="com.mycompany"
{code}

h5. Plugins

With a Grails plugin the @groupId@ and @version@ are taken from the following properties in the *GrailsPlugin.groovy descriptor:
{hidden}

Maven @ groupId @ será el mismo que el nombre del proyecto, a menos que se especifique otro diferente en Config.groovy:

{code}
Grails.Project.groupId="com.mycompany"
{code}

H5. Plugins

Con un plugin Grails la @ IdGrupo @ y @ versión @ proceden de las siguientes propiedades en el descriptor de *GrailsPlugin.groovy:

{hidden}


{code}
String groupId = 'myOrg'
String version = '0.1'
{code}

The 'artifactId' is taken from the plugin name. For example if you have a plugin called @FeedsGrailsPlugin@ the @artifactId@ will be "feeds". If your plugin does not specify a @groupId@ then this defaults to "org.grails.plugins".
{hidden}

{code}
String groupId = 'myOrg'
Versión de cadena = '0.1'
{code}

El 'artifactId' se toma desde el nombre del plugin. Por ejemplo, si tienes un plugin llamado @ FeedsGrailsPlugin @ artifactId @ @ será "feeds". Si tu plugin no especifica @ groupId @ entonces esto utiliza "org.grails.plugins".
