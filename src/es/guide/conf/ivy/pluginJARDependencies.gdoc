
{hidden}

h4. Specifying Plugin JAR dependencies

The way in which you specify dependencies for a [plugin|guide:plugins] is identical to how you specify dependencies in an application. When a plugin is installed into an application the application automatically inherits the dependencies of the plugin.

To define a dependency that is resolved for use with the plugin but not _exported_ to the application then you can set the @export@ property of the dependency:

{code}
test('org.spockframework:spock-core:0.5-groovy-1.8') {
    export = false
}
{code}
{hidden}

h4. Especificación de las dependencias JAR Plugin

La forma en que se especifican las dependencias para [plugin|guide:plugins] es idéntica al que permiten especificar las dependencias en una aplicación. Cuando se instala un plugin en una aplicación la aplicación hereda automáticamente las dependencias del plugin.

Para definir una dependencia que se resuelve para su uso con el plugin pero no _exported_ a la aplicación, a continuación, puede definir la exportación @ @ propiedad de la dependencia:

{code}
Test('org.spockframework:Spock-Core:0.5-Groovy-1.8') {}
    exportar = false
}
{code}

{hidden}


In this case the Spock dependency will be available only to the plugin and not resolved as an application dependency. Alternatively, if you're using the Map syntax:

{code}
test group: 'org.spockframework', name: 'spock-core',
     version: '0.5-groovy-1.8', export: false
{code}

{note}
You can use @exported = false@ instead of @export = false@, but we recommend the latter because it's consistent with the Map argument.
{hidden}

En este caso la dependencia Spock estarán disponibles sólo para el plugin y no resueltos como una dependencia de la aplicación. Alternativamente, si utiliza la sintaxis de mapa:

{code}
Grupo de prueba: 'org.spockframework', nombre: 'núcleo spock',
     versión: ' 0,5-groovy-1.8', exportar: falso
{code}

{Nota}
Puede utilizar exportados = false @ en lugar de exportación @ = false @, pero se recomienda este último porque es coherente con el argumento de mapa.

{hidden}

{note}

h4. Overriding Plugin JAR Dependencies in Your Application

If a plugin is using a JAR which conflicts with another plugin, or an application dependency then you can override how a plugin resolves its dependencies inside an application using exclusions. For example:

{code}
plugins {
    compile("\:hibernate\:\$grailsVersion") {
        excludes "javassist"
    }
}

dependencies {
    runtime "javassist:javassist:3.4.GA"
}
{code}
{hidden}

{Nota}

h4. Reemplazar Plugin JAR dependencias en su aplicación

Si un plugin está utilizando una jarra que conflictos con otro plugin, o una dependencia de la aplicación, a continuación, se puede reemplazar cómo un plugin resuelve sus dependencias dentro de una aplicación mediante las exclusiones. Por ejemplo:

{code}
{plugins
    compile("\:hibernate\:\$grailsVersion") {}
        excluye "javassist"
    }
}

{las dependencias
    tiempo de ejecución "javassist:javassist:3.4.GA"
}
{code}

{hidden}


In this case the application explicitly declares a dependency on the "hibernate" plugin and specifies an exclusion using the @excludes@ method, effectively excluding the javassist library as a dependency.
{hidden}

En este caso la aplicación explícitamente declara una dependencia en el plugin de "hibernación" y especifica una exclusión utilizando el @ excluye @ método, efectivamente con exclusión de la biblioteca de javassist como una dependencia.
