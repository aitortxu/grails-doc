
{hidden}

You can still use GORM validation even if you use a Java domain model. Grails lets you define constraints through separate scripts in the @src/java@ directory. The script must be in a directory that matches the package of the corresponding domain class and its name must have a _Constraints_ suffix. For example, if you had a domain class @org.example.Book@, then you would create the script @src/java/org/example/BookConstraints.groovy@\.

Add a standard GORM @constraints@ block to the script:
{code}
constraints = {
    title blank: false
    author blank: false
}
{code}

{hidden}

Todavía puede utilizar la validación de GORM incluso si se utiliza un modelo de dominio de Java. Grails permite definir restricciones mediante secuencias de comandos separados en @ src/java @ directorio. La secuencia de comandos debe estar en un directorio que coincida con el conjunto de la clase de dominio correspondiente y su nombre debe tener un sufijo _Constraints_. Por ejemplo, si hay una clase de dominio @ org.example.Book@, podría crear la secuencia de comandos @ src/java/org/example/BookConstraints.groovy@\.

Añadir un estándar GORM @ restricciones bloque @ a la secuencia de comandos:
{code}
restricciones = {}
    título en blanco: falso
    autor en blanco: falso
}
{code}

{hidden}

Once this is in place you can validate instances of your domain class!
{hidden}

Una vez hecho esto en su lugar puede validar las instancias de la clase de dominio!
