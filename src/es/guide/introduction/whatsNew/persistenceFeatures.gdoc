
{hidden}

h4. The GORM API

The GORM API has been formalized into a set of classes (@GormStaticApi@, @GormInstanceApi@ and @GormValidationApi@) that get statically wired into every domain class at the byte code level. The result is better code completion for IDEs, better integration with Java and the potential for more GORM implementations for other types of data stores.

h4. New findOrCreate and findOrSave Methods

Domain classes have support for the findOrCreateWhere, findOrSaveWhere, findOrCreateBy and findOrSaveBy query methods which behave just like findWhere and findBy methods except that they should never return null. If a matching instance cannot be found in the database then a new instance is created, populated with values represented in the query parameters and returned. In the case of findOrSaveWhere and findOrSaveBy, the instance is saved before being returned.

{code}
def book = Book.findOrCreateWhere(author: 'Douglas Adams', title: "The Hitchiker's Guide To The Galaxy")
def book = Book.findOrSaveWhere(author: 'Daniel Suarez', title: 'Daemon')
def book = Book.findOrCreateByAuthorAndTitle('Daniel Suarez', 'Daemon')
def book = Book.findOrSaveByAuthorAndTitle('Daniel Suarez', 'Daemon')
{code}
{hidden}

H4. La API de GORMLa API de GORM ha sido formalizada en un conjunto de clases (@ GormStaticApi @, @ GormInstanceApi @ y @ GormValidationApi @) que obtenga por est√°ticamente cable en cada clase de dominio en el nivel de c√≥digo de bytes. El resultado es mejor completar c√≥digo IDEs, mejor integraci√≥n con Java y el potencial para implementaciones de GORM m√°s para otros tipos de almacenes de datos.H4. Nuevos m√©todos findOrCreate y findOrSaveLas clases de dominio tienen soporte para findOrCreateWhere, findOrSaveWhere, findOrCreateBy y findOrSaveBy m√©todos de consulta que se comportan igual que los m√©todos findWhere y findBy, excepto que nunca deben devolver nulas. Si una instancia correspondiente no se encuentra en la base de datos, a continuaci√≥n, una nueva instancia se crea, rellena con valores representados en los par√°metros de consulta y regres√≥. En el caso de findOrSaveWhere y findOrSaveBy, se guarda la instancia antes de ser devuelto.{C√≥digo}libro de Def = Book.findOrCreateWhere (autor: Douglas Adams, t√≠tulo: "Del Hitchiker Guide To The Galaxy")libro de Def = Book.findOrSaveWhere (autor: 'Daniel Suarez', t√≠tulo: 'Demonio')libro de Def = Book.findOrCreateByAuthorAndTitle ('Daniel Su√°rez', 'Demonio')libro de Def = Book.findOrSaveByAuthorAndTitle ('Daniel Su√°rez', 'Demonio'){C√≥digo}

{hidden}


h4. Abstract Inheritance

GORM now supports abstract inheritance trees which means you can define queries and associations linking to abstract classes:

{code}
abstract Media {
    String title
    …
}
class Book extends Media {
}
class Album extends Media {

}
class Account {
    static hasMany = [purchasedMedia:Media]
}

..

def allMedia = Media.list()
{code}
{hidden}

H4. Herencia abstractaGORM ahora soporta √°rboles de herencia abstracta que significa que puede definir consultas y asociaciones de vincular a las clases abstractas:{C√≥digo}{abstracta de medios    T√≠tulo de cadena    √â}clase libro ampl√≠a {Media}clase √°lbum ampl√≠a {Media}clase cuenta {}    est√°tico hasMany = [purchasedMedia:Media]}..Def allMedia = Media.list(){C√≥digo}

{hidden}


h4. Multiple Data Sources Support

It is now possible to define multiple datasources in @DataSource.groovy@ and declare one or more datasources a particular domain uses by default:

{code}
class ZipCode {

   String code

   static mapping = {
      datasource 'ZIP_CODES'
   }
}
{code}
{hidden}

H4. Soporte de fuentes de datos m√∫ltiplesAhora es posible definir m√∫ltiples or√≠genes de datos en @DataSource.groovy@ y declarar uno o m√°s or√≠genes de datos un dominio particular utiliza por defecto:{C√≥digo}clase {c√≥digo postalCadena de c√≥digoasignaci√≥n est√°tica = {}      DataSource 'ZIP_CODES'   }}{C√≥digo}

{hidden}


If multiple datasources are specified for a domain then you can use the name of a particular datasource as a namespace in front of any regular GORM method:

{code}
def zipCode = ZipCode.auditing.get(42)
{code}

For more information see the section on [Multiple Data Sources|guide:multipleDatasources] in the user guide.

h4. Database Migrations
{hidden}

Si se especifican varios or√≠genes de datos para un dominio puede usar el nombre de un origen de datos concreto como un espacio de nombres de cualquier m√©todo GORM regular:{C√≥digo}c√≥digo postal Def = ZipCode.auditing.get(42){C√≥digo}Para obtener m√°s informaci√≥n, consulte la secci√≥n sobre [varios datos Sources|guide:multipleDatasources] en la Gu√≠a del usuario.H4. Migraciones de bases de datos

{hidden}


A new [database migration plugin|http://grails.org/plugin/database-migration] has been designed and built for Grails 2.0 allowing you to apply migrations to your database, rollback changes and diff your domain model with the current state of the database.

h4. Database Reverse Engineering

A new [database reverse engineering|http://www.grails.org/plugin/db-reverse-engineer] plugin has been designed and built for Grails 2.0 that allows you to generate a domain model from an existing database schema.

h4. Hibernate 3.6

Grails 2.0 is now built on Hibernate 3.6
{hidden}

Un nuevo [plugin|http://grails.org/plugin/database-migration migraci√≥n de bases de datos] ha sido dise√±ado y construido para Grails 2.0 permite aplicar las migraciones a la base de datos, cambios de rollback y diff su modelo de dominio con el estado actual de la base de datos.H4. Base de datos de ingenier√≠a inversaUn nuevo plugin [engineering|http://www.grails.org/plugin/db-reverse-engineer inversa de base de datos] ha sido dise√±ado y construido para Grails 2.0 que permite generar un modelo de dominio de un esquema de base de datos existente.H4. Hibernaci√≥n 3.6Grails 2.0 ahora se basa en hibernaci√≥n 3.6

{hidden}


h4. Bag Collections

You can now use Hibernate [Bag|http://docs.jboss.org/hibernate/stable/core/reference/en-US/html/collections.html]s for mapped collections to avoid the memory and performance issues of loading large collections to enforce @Set@ uniqueness or @List@ order.

For more information see the section on [Sets, Lists and Maps|guide:sets,ListsAndMaps] in the user guide.

{hidden}

H4. Colecciones de bolsaAhora puede utilizar Hibernate [Bag|http://docs.jboss.org/hibernate/stable/core/reference/en-US/html/collections.html]s para colecciones asignadas para evitar los problemas de memoria y el rendimiento de la carga de grandes colecciones para imponer @ Set @ singularidad o @ lista @ orden.Para obtener m√°s informaci√≥n, consulte la secci√≥n [conjuntos, listas y Maps|guide:sets, ListsAndMaps] en la Gu√≠a del usuario.
