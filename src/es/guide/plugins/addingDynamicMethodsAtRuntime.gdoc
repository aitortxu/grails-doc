
{hidden}

h4. The Basics

Grails plugins let you register dynamic methods with any Grails-managed or other class at runtime. This work is done in a @doWithDynamicMethods@ closure.

For Grails-managed classes like controllers, tag libraries and so forth you can add methods, constructors etc. using the "ExpandoMetaClass":http://groovy.codehaus.org/ExpandoMetaClass mechanism by accessing each controller's [MetaClass|api:http://groovy.codehaus.org/api/groovy/lang/MetaObjectProtocol.html]:

{code:java}
class ExamplePlugin {
    def doWithDynamicMethods = { applicationContext ->
        for (controllerClass in application.controllerClasses) {
             controllerClass.metaClass.myNewMethod = {-> println "hello world" }
        }
    }
}
{code}
{hidden}

h4. Los conceptos básicos

Plugins Grails le permiten registrar los métodos dinámicos con cualquier Grails administrado o de otra clase en tiempo de ejecución. Este trabajo se realiza en un @ doWithDynamicMethods @ cierre.

Para las clases administradas Grails como controladores, bibliotecas de etiquetas etc. pueden agregar métodos, constructores etc. mediante el "mecanismo de ExpandoMetaClass":http://groovy.codehaus.org/ExpandoMetaClass accediendo a cada controlador [MetaClass|api:http://groovy.codehaus.org/api/groovy/lang/MetaObjectProtocol.html]:

{code: java}
clase ExamplePlugin {}
    Def doWithDynamicMethods = {applicationContext->
        para (controllerClass en application.controllerClasses) {}
             controllerClass.metaClass.myNewMethod = {-> Console.println "Hola mundo"}
        }
    }
}
{code}

{hidden}


In this case we use the implicit application object to get a reference to all of the controller classes' MetaClass instances and add a new method called @myNewMethod@ to each controller. If you know beforehand the class you wish the add a method to you can simply reference its @metaClass@ property.

For example we can add a new method @swapCase@ to @java.lang.String@:

{code:java}
class ExamplePlugin {

    def doWithDynamicMethods = { applicationContext ->
        String.metaClass.swapCase = {->
             def sb = new StringBuilder()
             delegate.each {
                 sb << (Character.isUpperCase(it as char) ?
                        Character.toLowerCase(it as char) :
                        Character.toUpperCase(it as char))
             }
             sb.toString()
        }

        assert "UpAndDown" == "uPaNDdOWN".swapCase()
    }
}
{code}
{hidden}

En este caso utilizamos el objeto de aplicación implícita para obtener una referencia a todas metaclase instancias de las clases controlador y agregar un nuevo método llamado @ myNewMethod @ a cada controlador. Si sabe con antelación la clase que desea agregar un método al sólo puede hacer referencia a su metaclase @ @ propiedad.

Por ejemplo podemos añadir un nuevo método @ swapCase @ a @ java.lang.String@:

{code: java}
clase ExamplePlugin {}

Def doWithDynamicMethods = {applicationContext->
        String.metaClass.swapCase = {->
             Def sb = StringBuilder() nueva
             Delegate.each {}
                 ¿SB << (Character.isUpperCase (es como char)?
                        Character.toLowerCase (es como char):
                        Character.toUpperCase (es como char))
             }
             SB.ToString()
        }

afirma "UpAndDown" == "uPaNDdOWN".swapCase()
    }
}
{code}

{hidden}


h4. Interacting with the ApplicationContext

The @doWithDynamicMethods@ closure gets passed the Spring @ApplicationContext@ instance. This is useful as it lets you interact with objects within it. For example if you were implementing a method to interact with Hibernate you could use the @SessionFactory@ instance in combination with a @HibernateTemplate@:

{code:java}
import org.springframework.orm.hibernate3.HibernateTemplate

class ExampleHibernatePlugin {

   def doWithDynamicMethods = { applicationContext ->

       for (domainClass in application.domainClasses) {

           domainClass.metaClass.static.load = { Long id->
                def sf = applicationContext.sessionFactory
                def template = new HibernateTemplate(sf)
                template.load(delegate, id)
           }
       }
   }
}{code}

Also because of the autowiring and dependency injection capability of the Spring container you can implement more powerful dynamic constructors that use the application context to wire dependencies into your object at runtime:

{code:java}
{hidden}

h4. Interactuar con el ApplicationContext

@ DoWithDynamicMethods @ cierre se pasa la primavera @ ApplicationContext @ instancia. Esto es útil, ya que le permite interactuar con objetos en su interior. Por ejemplo, si se implementa un método para interactuar con la hibernación le podría utilizar el @ SessionFactory @ instancia en combinación con un @ HibernateTemplate @:

{code: java}
org.springframework.orm.hibernate3.HibernateTemplate de importación

clase ExampleHibernatePlugin {}

Def doWithDynamicMethods = {applicationContext->

para (domainClass en application.domainClasses) {}

domainClass.metaClass.static.load = {id largo->
                Def sf = applicationContext.sessionFactory
                plantilla de Def = HibernateTemplate(sf) nueva
                Template.Load (delegado, id)
           }
       }
   }
} {code}

También debido a la capacidad de inyección de autowiring y la dependencia del contenedor de primavera puede implementar más poderosos constructores dinámicos que utilizan el contexto de aplicación a las dependencias de alambre en el objeto en tiempo de ejecución:

{code: java}

{hidden}

class MyConstructorPlugin {

    def doWithDynamicMethods = { applicationContext ->
         for (domainClass in application.domainClasses) {
              domainClass.metaClass.constructor = {->
                  return applicationContext.getBean(domainClass.name)
              }
         }
    }
}{code}
{hidden}

clase MyConstructorPlugin {}

Def doWithDynamicMethods = {applicationContext->
         para (domainClass en application.domainClasses) {}
              domainClass.metaClass.constructor = {->
                  volver a applicationContext.getBean(domainClass.name)
              }
         }
    }
} {code}

{hidden}


Here we actually replace the default constructor with one that looks up prototyped Spring beans instead!
{hidden}

Aquí realmente nos reemplace el constructor predeterminado con uno que busca prototipo judías de primavera en su lugar!
