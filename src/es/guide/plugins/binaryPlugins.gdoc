
{hidden}

Regular Grails plugins are packaged as zip files containing the full source of the plugin. This has some advantages in terms of being an open distribution system (anyone can see the source), in addition to avoiding problems with the source compatibility level used for compilation.

As of Grails 2.0 you can pre-compile Grails plugins into regular JAR files known as "binary plugins". This has several advantages (and some disadvantages as discussed in the advantages of source plugins above) including:

* Binary plugins can be published as standard JAR files to a Maven repository
* Binary plugins can be declared like any other JAR dependency
* Commercial plugins are more viable since the source isn't published
* IDEs have a better understanding since binary plugins are regular JAR files containing classes

h4. Packaging
{hidden}

Plugins de Grails regulares están empaquetados como archivos zip que contiene el origen completo del plugin. Esto tiene algunas ventajas en términos de ser un sistema de distribución abierta (nadie puede ver el código fuente), además de evitar problemas con el nivel de compatibilidad de la fuente utilizada para la compilación.

Como de Grails 2.0 puede precompilar plugins Grails en archivos JAR regulares conocidos como "plugins binarios". Esto tiene varias ventajas (y algunas desventajas, como se explica en las ventajas de origen plugins arriba) incluyendo:

* Binario plugins pueden publicarse como archivos JAR estándar a un repositorio de Maven
* Plugins binario puede declararse como cualquier otra dependencia JAR
* Comerciales plugins son más viables ya que la fuente no está publicada
* IDEs tener una mejor comprensión ya plugins binarios son regulares archivos JAR que contiene clases

h4. Embalaje

{hidden}


To package a plugin in binary form you can use the package-plugin command and the @--binary@ flag:

{code}
grails package-plugin --binary
{code}

Supported artefacts include:

* Grails artifact classes such as controllers, domain classes and so on
{hidden}

Para empaquetar un plugin en formato binario puede utilizar el comando paquete plugin y el @--binario @ bandera:

{code}
Grails paquete-plugin--binario
{code}

Artefactos soportados incluyen:

* Artefacto Grails clases como controladores, clases de dominio, etc.

{hidden}

* I18n Message bundles
* GSP Views, layouts and templates

You can also specify the packaging in the plugin descriptor:

{code}
def packaging = "binary"
{code}

in which case the packaging will default to binary.
{hidden}

* Paquetes de mensaje I18n
* SGP vistas, diseños y plantillas

También puede especificar el envase en el descriptor de plugin:

{code}
embalaje Def = "binario"
{code}

en cuyo caso la presentación predeterminada binario.

{hidden}


h4. Using Binary Plugins

The packaging process creates a JAR file in the @target@ directory of the plugin, for example @target/foo-plugin-0.1.jar@. There are two ways to incorporate a binary plugin into an application.

One is simply placing the plugin JAR file in your application's @lib@ directory. The other is to publish the plugin JAR to a compatible Maven repository and declare it as a dependency in @grails-app/conf/BuildConfig.groovy@:

{code}
dependencies {
    compile "mycompany:myplugin:0.1"
}
{code}
{hidden}

h4. Mediante Plugins binarios

El proceso de empaquetado crea un fichero JAR en el destino @ directorio del plugin, por ejemplo @ target/foo-plugin-0.1.jar@ @. Hay dos maneras de incorporar un plugin binario en una aplicación.

Simplemente uno es colocar el archivo JAR del plugin en lib @ la aplicación @ directorio. La otra es para publicar el plugin JAR en un repositorio de Maven compatible y declarar como una dependencia en @ grails-app/conf/BuildConfig.groovy@:

{code}
{las dependencias
    compilar "mycompany:myplugin:0.1"
}
{code}

{hidden}


{note}
Since binary plugins are packaged as JAR files, they are declared as dependencies in the @dependencies@ block, _not_ in the @plugins@ block as you may be naturally inclined to do. The @plugins@ block is used for declaring traditional source plugins packaged as zip files
{note}
{hidden}

{Nota}
Desde plugins binarios están empaquetados como archivos JAR, se declaran como dependencias en las dependencias de @ bloque @, _no_ en los plugins @ bloque @ como usted puede naturalmente inclinado a hacer. Los plugins @ bloque @ se utiliza para declarar la fuente tradicional de plugins empaquetado como archivos zip
{Nota}
