
{hidden}

h4. Post-Install Configuration and Participating in Upgrades

Grails plugins can do post-install configuration and participate in application upgrade process (the [upgrade|commandLine] command). This is achieved using two specially named scripts under the @scripts@ directory of the plugin - @_Install.groovy@ and @_Upgrade.groovy@.

@_Install.groovy@ is executed after the plugin has been installed and @_Upgrade.groovy@ is executed each time the user upgrades the application (but not the plugin) with [upgrade|commandLine] command.

These scripts are [Gant|guide:commandLine] scripts, so you can use the full power of Gant. An addition to the standard Gant variables there is also a @pluginBasedir@ variable which points at the plugin installation basedir.

As an example this @_Install.groovy@ script will create a new directory type under the @grails-app@ directory and install a configuration template:

{hidden}

h4. Configuración y participando en actualizaciones posteriores a la instalación

Plugins Grails puedan participar en el proceso de actualización de aplicaciones (el comando [upgrade|commandLine]) y posteriores a la instalación de configuración. Esto se logra mediante dos guiones especialmente con nombre bajo los scripts @ @ directorio del plugin - @_Install.groovy@ y @ _Upgrade.groovy@.

@_Install.Groovy@ se ejecuta después de que se ha instalado el plugin y @_Upgrade.groovy@ se ejecuta cada vez que el usuario actualiza la aplicación (pero no el plugin) con el comando [upgrade|commandLine].

Estos scripts son secuencias de comandos de [Gant|guide:commandLine], por lo que se puede utilizar todo el poder de Gant. Una adición a las variables estándar de Gant allí es también un @ pluginBasedir @ variable que apunta en el plugin instalación basedir.

Como ejemplo esta secuencia de comandos de @_Install.groovy@ se crea un nuevo tipo de directorio bajo el @ grails-app @ directorio e instalar una plantilla de configuración:

{hidden}

{code:java}
ant.mkdir(dir: "${basedir}/grails-app/jobs")

ant.copy(file: "${pluginBasedir}/src/samples/SamplePluginConfig.groovy",
         todir: "${basedir}/grails-app/conf")
{code}

h4. Scripting events

It is also possible to hook into command line scripting events. These are events triggered during execution of Grails target and plugin scripts.
{hidden}

{code: java}
Ant.mkdir (dir: "$ {basedir} / grails-app/puestos de trabajo")

Ant.Copy (archivo: "$ {pluginBasedir}/src/samples/SamplePluginConfig.groovy",
         todir: "$ {basedir} / grails-app/conf")
{code}

h4. Eventos de secuencias de comandos

También es posible enlazar a eventos de secuencias de comandos de línea de comandos. Estos son eventos activados durante la ejecución de secuencias de comandos de Grails plugin y de destino.

{hidden}


For example, you can hook into status update output (i.e. "Tests passed", "Server running") and the creation of files or artefacts.

A plugin just has to provide an @_Events.groovy@ script to listen to the required events. Refer the documentation on [Hooking into Events|guide:events] for further information.
{hidden}

Por ejemplo, se pueden enlazar a la salida de actualización de Estado (es decir, "Pasadas las pruebas", "Servidor ejecutando") y la creación de archivos o artefactos.

Un plugin sólo tiene que proporcionar una secuencia de comandos @_Events.groovy@ para escuchar los eventos necesarios. Para obtener más información, consulte la documentación de [enlace en Events|guide:events].
