
{hidden}

Scaffolding lets you auto-generate a whole application for a given domain class including:

* The necessary [views|guide:gsp]
* Controller actions for create/read/update/delete (CRUD) operations

h4. Dynamic Scaffolding

The simplest way to get started with scaffolding is to enable it with the @scaffold@ property. Set the @scaffold@ property in the controller to @true@ for the @Book@ domain class:

{code:java}
class BookController {
    static scaffold = true
}
{code}
{hidden}

Andamios permite auto-generar una aplicación completa de un dominio dado clase incluyendo:

* La necesaria [views|guide:gsp]
* Acciones controlador para las operaciones crear/lectura/update/delete (CRUD)

h4. Andamios dinámico

Es la forma más sencilla de empezar a trabajar con andamios habilitar con el andamio @ @ propiedad. Establecer el andamio @ @ propiedad en el controlador de @ True @ para el libro @ @ clase de dominio:

{code: java}
clase BookController {}
    Andamio estática = true
}
{code}

{hidden}


This works because the @BookController@ follows the same naming convention as the @Book@ domain class. To scaffold a specific domain class we could reference the class directly in the scaffold property:

{code:java}
class SomeController {
    static scaffold = Author
}
{code}

With this configured, when you start your application the actions and views will be auto-generated at runtime. The following actions are dynamically implemented by default by the runtime scaffolding mechanism:
{hidden}

Esto funciona porque la @ BookController @ sigue la misma Convención de nomenclatura como el libro @ @ clase de dominio. Al andamio de una clase de dominio específico podríamos hacer referencia la clase directamente en la propiedad de andamio:

{code: java}
clase SomeController {}
    Andamio estática = autor
}
{code}

Con esto configurado, al iniciar la aplicación de las acciones y opiniones serán generados automáticamente en tiempo de ejecución. Las siguientes acciones son ejecutadas dinámicamente por defecto por el mecanismo de andamios de tiempo de ejecución:

{hidden}


* list
* show
* edit
* delete
* create
* save
* update

A CRUD interface will also be generated. To access this open @http://localhost:8080/app/book@ in a browser.
{hidden}

* lista
* show
* Editar
* eliminar
* crear
* guardar
* actualización

También se generará una interfaz CRUD. Para acceder a este abierto @ http://localhost:8080/app/book@ en un navegador.

{hidden}


If you prefer to keep your domain model in Java and [mapped with Hibernate|guide:hibernate] you can still use scaffolding, simply import the domain class and set its name as the @scaffold@ argument.

You can add new actions to a scaffolded controller, for example:

{code:java}
class BookController {

    static scaffold = Book

    def changeAuthor() {
        def b = Book.get(params.id)
        b.author = Author.get(params["author.id"])
        b.save()

        // redirect to a scaffolded action
        redirect(action:show)
    }
}
{code}
{hidden}

Si prefiere mantener su modelo de dominio en Java y [asignada con Hibernate|guide: hibernación] puede aún utilizar andamios, simplemente importar la clase de dominio y establecer su nombre como el andamio @ @ argumento.

Puede añadir nuevas acciones a un controlador de scaffolded, por ejemplo:

{code: java}
clase BookController {}

Andamio estática = libro

Def changeAuthor() {}
        Def b = Book.get(params.id)
        b.Author = Author.get(params["author.id"])
        b.Save()

/ / redirigir a una acción scaffolded
        Redirect(Action:Show)
    }
}
{code}

{hidden}


You can also override the scaffolded actions:

{code:java}
class BookController {

    static scaffold = Book

    // overrides scaffolded action to return both authors and books
    def list() {
        [bookInstanceList: Book.list(),
         bookInstanceTotal: Book.count(),
         authorInstanceList: Author.list()]
    }

    def show() {
        def book = Book.get(params.id)
        log.error(book)
        [bookInstance : book]
    }
}
{code}
{hidden}

También puede anular las acciones scaffolded:

{code: java}
clase BookController {}

Andamio estática = libro

/ / reemplaza scaffolded acción devolver libros y autores
    Def list() {}
        [bookInstanceList: Book.list(),
         bookInstanceTotal: Book.count(),
         authorInstanceList: Author.list()]
    }

Def show() {}
        libro de Def = Book.get(params.id)
        log.error(Book)
        [bookInstance: libro]
    }
}
{code}

{hidden}


All of this is what is known as "dynamic scaffolding" where the CRUD interface is generated dynamically at runtime.

{note}
By default, the size of text areas in scaffolded views is defined in the CSS, so adding 'rows' and 'cols' attributes will have no effect.

Also, the standard scaffold views expect model variables of the form @<propertyName>InstanceList@ for collections and @<propertyName>Instance@ for single instances. It's tempting to use properties like 'books' and 'book', but those won't work.
{note}

h4. Customizing the Generated Views
{hidden}

Todo esto es lo que se conoce como "andamiaje dinámico" donde la interfaz CRUD se genera dinámicamente en tiempo de ejecución.

{Nota}
De forma predeterminada, el tamaño de las áreas de texto en las vistas scaffolded se define en la CSS, añadiendo así 'filas' y atributos 'coroneles' no tienen ningún efecto.

También, las opiniones de andamio estándar que las variables del modelo de la forma @<propertyname>InstanceList @ para colecciones y @<propertyname>instancia @ para instancias únicas. Es tentador para utilizar propiedades como 'libros' y 'libro', pero aquellos no funcionarán.
{Nota}

h4. Personalizar las vistas generadas</propertyname> </propertyname>

{hidden}


The views adapt to [Validation constraints|guide:constraints]. For example you can change the order that fields appear in the views simply by re-ordering the constraints in the builder:

{code:java}
def constraints = {
    title()
    releaseDate()
}
{code}

{hidden}

Las vistas se adaptan a [validación constraints|guide:constraints]. Por ejemplo se puede cambiar el orden en que aparecen los campos en las vistas simplemente por la reorganización de las restricciones en el generador de:

{code: java}
restricciones de Def = {}
    Title()
    releaseDate()
}
{code}

{hidden}

You can also get the generator to generate lists instead of text inputs if you use the @inList@ constraint:

{code:java}
def constraints = {
    title()
    category(inList: ["Fiction", "Non-fiction", "Biography"])
    releaseDate()
}
{code}

{hidden}

También puede obtener el generador para generar listas en lugar de entradas de texto si utiliza @ inList @ restricción:

{code: java}
restricciones de Def = {}
    Title()
    categoría (inList: ["Ficción", "No ficción", "Biografía"])
    releaseDate()
}
{code}

{hidden}

Or if you use the @range@ constraint on a number:

{code:java}
def constraints = {
    age(range:18..65)
}
{code}

Restricting the size with a constraint also effects how many characters can be entered in the generated view:

{hidden}

O si utiliza el rango de @ @ restricción sobre un número:

{code: java}
restricciones de Def = {}
    Age(Range:18..65)
}
{code}

Limitar el tamaño con una restricción también efectos cuántos caracteres se pueden introducir en la vista generada:

{hidden}

{code:java}
def constraints = {
    name(size:0..30)
}
{code}

h4. Static Scaffolding

Grails also supports "static" scaffolding.

{hidden}

{code: java}
restricciones de Def = {}
    nombre (tamaño: 0...30)
}
{code}

h4. Andamios estático

Grails también soporta andamios "estática".

{hidden}

The above scaffolding features are useful but in real world situations it's likely that you will want to customize the logic and views. Grails lets you generate a controller and the views used to create the above interface from the command line. To generate a controller type:

{code:java}
grails generate-controller Book
{code}

or to generate the views:

{code:java}
grails generate-views Book
{code}
{hidden}

Las anteriores características de andamios son útiles pero en situaciones reales es probable que desee personalizar las vistas y lógica. Grails le permite generar un controlador y las opiniones que se utiliza para crear la interfaz de arriba de la línea de comandos. Para generar un tipo de controlador:

{code: java}
Grails generar-controlador libro
{code}

o para generar las vistas:

{code: java}
Libro de Grails generar vistas
{code}

{hidden}


or to generate everything:

{code:java}
grails generate-all Book
{code}

If you have a domain class in a package or are generating from a [Hibernate mapped class|guide:hibernate] remember to include the fully qualified package name:

{code:java}
grails generate-all com.bookstore.Book
{code}
{hidden}

o generar todo:

{code: java}
Grails generar todo libro
{code}

Si tiene una clase de dominio en un paquete o están generando desde un [Hibernate asignado class|guide: hibernación] recuerde que debe incluir el nombre completo del paquete:

{code: java}
Grails todo generar com.bookstore.Book
{code}

{hidden}


h4. Customizing the Scaffolding templates

The templates used by Grails to generate the controller and views can be customized by installing the templates with the [install-templates|commandLine] command.
{hidden}

h4. Personalizar las plantillas de andamios

Las plantillas utilizadas por Grails para generar el controlador y las vistas pueden personalizarse mediante la instalación de las plantillas con el comando [install-templates|commandLine].
