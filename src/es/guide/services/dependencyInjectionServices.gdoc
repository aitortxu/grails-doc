
{hidden}

h4. Dependency Injection Basics

A key aspect of Grails services is the ability to use [Spring Framework|http://www.springframework.org/]'s dependency injection features. Grails supports "dependency injection by convention". In other words, you can use the property name representation of the class name of a service to automatically inject them into controllers, tag libraries, and so on.

As an example, given a service called @BookService@, if you define a property called @bookService@ in a controller as follows:

{code:java}
class BookController {
    def bookService
    ...
}
{code}
{hidden}

h4. Conceptos básicos de inyección de dependencia

Un aspecto clave de los servicios de Grails es la capacidad para utilizar [funciones de inyección de dependencia Framework|http://www.springframework.org/]'s de primavera. Grails admite "inyección de dependencias por la Convención". En otras palabras, puede utilizar la representación de nombre propiedad del nombre de un servicio de clase automáticamente los inyectar a los controladores, las bibliotecas de etiquetas y así sucesivamente.

Por ejemplo, dado un servicio llamado @ BookService @, si se define una propiedad llamada @ bookService @ en un controlador como sigue:

{code: java}
clase BookController {}
    Def bookService
    ...
}
{code}

{hidden}


In this case, the Spring container will automatically inject an instance of that service based on its configured scope. All dependency injection is done by name. You can also specify the type as follows:

{code:java}
class AuthorService {
    BookService bookService
}
{code}

{note}
{hidden}

En este caso, el contenedor de primavera inyectará automáticamente una instancia de ese servicio basado en su ámbito configurado. Todos inyección de dependencias se realiza por su nombre. También puede especificar el tipo como sigue:

{code: java}
clase AuthorService {}
    BookService bookService
}
{code}

{Nota}

{hidden}

NOTE: Normally the property name is generated by lower casing the first letter of the type.  For example, an instance of the @BookService@ class would map to a property named @bookService@.

To be consistent with standard JavaBean conventions, if the first 2 letters of the class name are upper case, the property name is the same as the class name.  For example, the property name of the @JDBCHelperService@ class would be @JDBCHelperService@, not @jDBCHelperService@ or @jdbcHelperService@.

See section 8.8 of the JavaBean specification for more information on de-capitalization rules.
{note}

h4. Dependency Injection and Services

You can inject services in other services with the same technique. If you had an @AuthorService@ that needed to use the @BookService@, declaring the @AuthorService@ as follows would allow that:
{hidden}

Nota: Normalmente el nombre de la propiedad es generado por la carcasa inferior la primera letra del tipo.  Por ejemplo, podría asignar una instancia de la @ BookService @ clase a una propiedad denominada @ bookService @.

Para ser coherente con las Convenciones JavaBean estándar, si las primero 2 letras del nombre de clase son mayúsculas, el nombre de la propiedad es el mismo que el nombre de clase.  Por ejemplo, el nombre de la propiedad de la @ JDBCHelperService @ clase sería @ JDBCHelperService @ no @ jDBCHelperService @ o @ jdbcHelperService @.

Consulte la sección 8.8 de la especificación JavaBean para obtener más información sobre las reglas de de-capitalization.
{Nota}

h4. Inyección de dependencias y servicios

Puede inyectar servicios en otros servicios con la misma técnica. Si tuvieras un @ AuthorService @ es necesario utilizar el @ BookService @, declarando el @ AuthorService @ así permitiría:

{hidden}


{code:java}
class AuthorService {
    def bookService
}
{code}

h4. Dependency Injection and Domain Classes / Tag Libraries

You can even inject services into domain classes and tag libraries, which can aid in the development of rich domain models and views:
{hidden}

{code: java}
clase AuthorService {}
    Def bookService
}
{code}

h4. Inyección de dependencias y clases de dominio / Tag bibliotecas

Incluso puede inyectar servicios en clases de dominio y las bibliotecas de etiquetas, que pueden ayudar en el desarrollo de modelos de dominio Rico y vistas:

{hidden}


{code:java}
class Book {
    ...
    def bookService

    def buyBook() {
        bookService.buyBook(this)
    }
}
{code}
{hidden}

{code: java}
clase {libro
    ...
    Def bookService

Def buyBook() {}
        bookService.buyBook(this)
    }
}
{code}
