
{hidden}

Unit testing filters is typically a matter of testing a controller where a filter is a mock collaborator. For example consider the following filters class:

{code:java}
class CancellingFilters {
    def filters = {
        all(controller:"simple", action:"list") {
            before = {
                redirect(controller:"book")
                return false
            }
        }
    }
}
{code}
{hidden}

Filtros de pruebas unitarias normalmente es cuestión de probar un controlador donde un filtro es un colaborador de simulacro. Por ejemplo, considere la siguiente clase de filtros:

{code: java}
clase CancellingFilters {}
    filtros de Def = {}
        todos (controlador: "simple", acción: "lista") {}
            antes = {}
                Redirect(Controller:"Book")
                return false
            }
        }
    }
}
{code}

{hidden}


This filter interceptors the @list@ action of the @simple@ controller and redirects to the @book@ controller. To test this filter you start off with a test that targets the @SimpleController@ class and add the @CancellingFilters@ as a mock collaborator:

{code:java}
@TestFor(SimpleController)
@Mock(CancellingFilters)
class SimpleControllerTests {

}
{code}
{hidden}

Este filtro interceptores la lista @ @ acción sencilla @ @ controlador y redirige al libro @ @ controlador. Para probar este filtro empezar con una prueba de objetivos @ SimpleController @ clase y agregue @ CancellingFilters @ como colaborador simulacro:

{code: java}
@TestFor(SimpleController)
@Mock(CancellingFilters)
clase SimpleControllerTests {}

}
{code}

{hidden}


You can then implement a test that uses the @withFilters@ method to wrap the call to an action in filter execution:

{code:java}
void testInvocationOfListActionIsFiltered() {
    withFilters(action:"list") {
        controller.list()
    }
    assert response.redirectedUrl == '/book'
}
{code}
{hidden}

A continuación, puede implementar una prueba que utiliza el @ withFilters @ método para envolver el llamamiento a una acción en la ejecución de filtro:

{code: java}
void testInvocationOfListActionIsFiltered() {}
    withFilters(action:"list") {}
        Controller.List()
    }
    valer response.redirectedUrl == ' / reserva '
}
{code}

{hidden}


Note that the @action@ parameter is required because it is unknown what the action to invoke is until the action is actually called. The @controller@ parameter is optional and taken from the controller under test. If it is a another controller you are testing then you can specify it:

{code:java}
withFilters(controller:"book",action:"list") {
    controller.list()
}
{code}
{hidden}

Tenga en cuenta que se requiere la acción @ @ parámetro porque se desconoce qué la acción para invocar es hasta que realmente se llama a la acción. El controlador @ @ parámetro es opcional y tomadas desde el controlador de prueba. Si un controlador de otro está probando a continuación, se puede especificar:

{code: java}
withFilters(controller:"book",action:"list") {}
    Controller.List()
}
{code}
