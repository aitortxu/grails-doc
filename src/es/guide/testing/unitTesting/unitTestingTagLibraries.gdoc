
{hidden}

h4. The Basics

Tag libraries and GSP pages can be tested with the @grails.test.mixin.web.GroovyPageUnitTestMixin@ mixin. To use the mixin declare which tag library is under test with the @TestFor@ annotation:

{code:java}
@TestFor(SimpleTagLib)
class SimpleTagLibTests {

}
{code}
{hidden}

h4. Los conceptos básicos

Bibliotecas de etiquetas y SGP páginas se pueden probar con el @grails.test.mixin.web.GroovyPageUnitTestMixin@ mixin. Para utilizar el mixin declarar qué etiqueta biblioteca es sometida a prueba con el @ TestFor @ anotación:

{code: java}
@TestFor(SimpleTagLib)
clase SimpleTagLibTests {}

}
{code}

{hidden}


Note that if you are testing invocation of a custom tag from a controller you can combine the @ControllerUnitTestMixin@ and the @GroovyPageUnitTestMixin@ using the @Mock@ annotation:

{code:java}
@TestFor(SimpleController)
@Mock(SimpleTagLib)
class GroovyPageUnitTestMixinTests {

}
{code}
{hidden}

Tenga en cuenta que si está probando la invocación de una etiqueta personalizada de un controlador puede combinar la @ ControllerUnitTestMixin @ y @ GroovyPageUnitTestMixin @ mediante el simulacro @ @ anotación:

{code: java}
@TestFor(SimpleController)
@Mock(SimpleTagLib)
clase GroovyPageUnitTestMixinTests {}

}
{code}

{hidden}


h4. Testing Custom Tags

The core Grails tags don't need to be enabled during testing, however custom tag libraries do. The @GroovyPageUnitTestMixin@ class provides a @mockTagLib()@ method that you can use to mock a custom tag library. For example consider the following tag library:

{code:java}
class SimpleTagLib {

    static namespace = 's'

    def hello = { attrs, body ->
        out << "Hello ${attrs.name ?: 'World'}"
    }
}
{code}
{hidden}

h4. Pruebas de etiquetas personalizadas

Las etiquetas de Grails de núcleo no necesitan activarse durante las pruebas, las bibliotecas de etiquetas personalizadas sin embargo hacen. @ GroovyPageUnitTestMixin @ clase proporciona un @ mockTagLib() @ método que puede utilizar para burlarse de una biblioteca de etiquetas personalizadas. Por ejemplo, considere la biblioteca de etiquetas siguientes:

{code: java}
clase SimpleTagLib {}

espacio de nombres estático = del '

Hola Def = {attrs, cuerpo->
        cabo << "Hola ${attrs.name?: 'Mundo'}"
    }
}
{code}

{hidden}


You can test this tag library by using @TestFor@ and supplying the name of the tag library:

{code:java}
@TestFor(SimpleTagLib)
class SimpleTagLibTests {
    void testHelloTag() {
        assert applyTemplate('<s:hello />') == 'Hello World'
        assert applyTemplate('<s:hello name="Fred" />') == 'Hello Fred'
    }
}
{code}
{hidden}

Para probar esta biblioteca de etiquetas, con @ TestFor @ y suministrar el nombre de la biblioteca de etiquetas:

{code: java}
@TestFor(SimpleTagLib)
clase SimpleTagLibTests {}
    void testHelloTag() {}
        valer applyTemplate («<s:hello></s:hello>») == 'Hello World'
        valer applyTemplate («<s:hello name="Fred"></s:hello>») == 'Hola Fred'
    }
}
{code}

{hidden}


Alternatively, you can use the @TestMixin@ annotation and mock multiple tag libraries using the @mockTagLib()@ method:

{code:java}
@grails.test.mixin.TestMixin(GroovyPageUnitTestMixin)
class MultipleTagLibraryTests {

    @Test
    void testMuliple() {
        mockTagLib(FirstTagLib)
        mockTagLib(SecondTagLib)

        ...
    }
}
{code}
{hidden}

Como alternativa, puede utilizar el @ TestMixin @ anotación y simulacros de múltiples bibliotecas de etiquetas con @ mockTagLib() @ método:

{code: java}
@Grails.Test.mixin.TestMixin(GroovyPageUnitTestMixin)
clase MultipleTagLibraryTests {}

@ Prueba
    void testMuliple() {}
        mockTagLib(FirstTagLib)
        mockTagLib(SecondTagLib)

...
    }
}
{code}

{hidden}


The @GroovyPageUnitTestMixin@ provides convenience methods for asserting that the template output equals or matches an expected value.

{code:java}
@grails.test.mixin.TestMixin(GroovyPageUnitTestMixin)
class MultipleTagLibraryTests {

    @Test
    void testMuliple() {
        mockTagLib(FirstTagLib)
        mockTagLib(SecondTagLib)
        assertOutputEquals ('Hello World', '<s:hello />')
        assertOutputMatches (/.*Fred.*/, '<s:hello name="Fred" />')
    }
}
{code}
{hidden}

@ GroovyPageUnitTestMixin @ proporciona métodos de conveniencia para afirmar que la salida de plantilla es igual a o coincide con un valor esperado.

{code: java}
@Grails.Test.mixin.TestMixin(GroovyPageUnitTestMixin)
clase MultipleTagLibraryTests {}

@ Prueba
    void testMuliple() {}
        mockTagLib(FirstTagLib)
        mockTagLib(SecondTagLib)
        assertOutputEquals ('Hola', '<s:hello></s:hello>')
        assertOutputMatches (/. * Fred.*, '<s:hello name="Fred"></s:hello>')
    }
}
{code}

{hidden}


h4. Testing View and Template Rendering

You can test rendering of views and templates in @grails-app/views@ via the @render(Map)@ method provided by @GroovyPageUnitTestMixin@ :

{code:java}
def result = render(template: "/simple/hello")
assert result == "Hello World"
{code}

{hidden}

h4. Pruebas de la vista y la representación de la plantilla

Puede probar representación de vistas y plantillas en @ grails-app/vistas @ vía @ render(Map) @ método proporcionado por @ GroovyPageUnitTestMixin @:

{code: java}
resultado de Def = render (plantilla: "/ simple/Hola")
afirman resultado == "Hello World"
{code}

{hidden}

This will attempt to render a template found at the location @grails-app/views/simple/_hello.gsp@. Note that if the template depends on any custom tag libraries you need to call @mockTagLib@ as described in the previous section.
{hidden}

Esto intentará procesar una plantilla que se encuentra en la ubicación @ grails-app/views/simple/_hello.gsp@. Tenga en cuenta que si la plantilla depende de las bibliotecas de etiquetas personalizadas que necesita llamar a @ mockTagLib @ como se describe en la sección anterior.
