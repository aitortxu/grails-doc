
{hidden}

There are a number of different ways to implement Ajax which are typically broken down into:

* Content Centric Ajax - Where you just use the HTML result of a remote call to update the page
* Data Centric Ajax - Where you actually send an XML or JSON response from the server and programmatically update the page
* Script Centric Ajax - Where the server sends down a stream of JavaScript to be evaluated on the fly

Most of the examples in the [Ajax|guide:ajax] section cover Content Centric Ajax where you are updating the page, but you may also want to use Data Centric or Script Centric. This guide covers the different styles of Ajax.

h4. Content Centric Ajax

{hidden}

Hay una serie de diferentes formas de implementar Ajax que normalmente se dividen en:

* Centrado en Ajax - donde sólo utiliza el resultado HTML de una llamada remota para actualizar la página de contenido
* Datos centrado en Ajax - donde realmente enviar una respuesta XML o JSON desde el servidor y actualizar mediante programación la página
* Centrado en Ajax - donde el servidor envía hacia abajo de una secuencia de JavaScript a evaluarse sobre la marcha de secuencias de comandos

La mayoría de los ejemplos de la sección [Ajax|guide:ajax] cubre Ajax centrado en el contenido que está actualizando la página, pero también puede que desee utilizar centrado en datos o centrado en la secuencia de comandos. Esta guía abarca los diferentes estilos de Ajax.

h4. Ajax centrado en el contenido

{hidden}

Just to re-cap, content centric Ajax involves sending some HTML back from the server and is typically done by rendering a template with the [render|controllers] method:

{code:java}
def showBook() {
    def b = Book.get(params.id)

    render(template: "bookTemplate", model: [book: b])
}
{code}

{hidden}

Justo al resumen, Ajax centrado en el contenido consiste en el envío HTML del servidor y se hace habitualmente al representar una plantilla con el método [render|controllers]:

{code: java}
Def showBook() {}
    Def b = Book.get(params.id)

Render (plantilla: "bookTemplate", modelo: [libro: b])
}
{code}

{hidden}

Calling this on the client involves using the [remoteLink|tags] tag:

{code:xml}
<g:remoteLink action="showBook" id="${book.id}"
              update="book${book.id}">Update Book</g:remoteLink>

<div id="book${book.id}">
   <!--existing book mark-up -->
</div>
{code}
{hidden}

Llamar a esto en el cliente implica el uso de la etiqueta [remoteLink|tags]:

{Código: xml}
<g:remotelink action="showBook" id="${book.id}" update="book${book.id}">Actualizar el libro</g:remotelink>

<div id="book${book.id}">
   <!--existing book mark-up -->
</div>{code}

{hidden}


h4. Data Centric Ajax with JSON

Data Centric Ajax typically involves evaluating the response on the client and updating programmatically. For a JSON response with Grails you would typically use Grails' [JSON marshalling|guide:xmlAndJSON] capability:

{code:java}
import grails.converters.JSON

def showBook() {
    def b = Book.get(params.id)

    render b as JSON
}
{code}
{hidden}

h4. Datos centrado en Ajax con JSON

Ajax centrado en datos normalmente implica evaluar la respuesta del cliente y actualizar mediante programación. Para una respuesta JSON con Grails, suele utilizarse capacidad de [JSON marshalling|guide:xmlAndJSON] de Grails:

{code: java}
grails.converters.JSON de importación

Def showBook() {}
    Def b = Book.get(params.id)

procesar b como JSON
}
{code}

{hidden}


And then on the client parse the incoming JSON request using an Ajax event handler:

{code:xml}
<g:javascript>
function updateBook(e) {
    var book = eval("("+e.responseText+")") // evaluate the JSON
    $("book" + book.id + "_title").innerHTML = book.title
}
<g:javascript>
<g:remoteLink action="test" update="foo" onSuccess="updateBook(e)">
    Update Book
</g:remoteLink>
<g:set var="bookId">book${book.id}</g:set>
<div id="${bookId}">
    <div id="${bookId}_title">The Stand</div>
</div>
{code}
{hidden}

Y, a continuación, el cliente analizar la solicitud entrante de JSON mediante un controlador de eventos de Ajax:

{Código: xml}
<g:javascript>
función updateBook(e) {}
    libro de var = eval ("("e.responseText")") / / evaluar el JSON
    $("Book" Book.ID "_title").innerHTML = book.title
}
<g:javascript><g:remotelink action="test" update="foo" onsuccess="updateBook(e)">
    Libro de actualización
</g:remotelink> <g:set var="bookId">book${book.id}</g:set>


<div id="${bookId}">
    <div id="${bookId}_title">El Stand</div>
</div>{code}</g:javascript></g:javascript>

{hidden}


h4. Data Centric Ajax with XML

On the server side using XML is equally simple:

{code:java}
import grails.converters.XML

def showBook() {
    def b = Book.get(params.id)

    render b as XML
}
{code}
{hidden}

h4. Datos centrado en Ajax con XML

En el servidor de lado utilizando XML es igualmente simple:

{code: java}
grails.converters.XML de importación

Def showBook() {}
    Def b = Book.get(params.id)

procesar b como XML
}
{code}

{hidden}


However, since DOM is involved the client gets more complicated:

{code:xml}
<g:javascript>
function updateBook(e) {
    var xml = e.responseXML
    var id = xml.getElementsByTagName("book").getAttribute("id")
    $("book" + id + "_title") = xml.getElementsByTagName("title")[0].textContent
}
<g:javascript>
<g:remoteLink action="test" update="foo" onSuccess="updateBook(e)">
    Update Book
</g:remoteLink>
<g:set var="bookId">book${book.id}</g:set>
<div id="${bookId}">
    <div id="${bookId}_title">The Stand</div>
</div>
{code}
{hidden}

Sin embargo, dado que está involucrado el DOM se complica el cliente:

{Código: xml}
<g:javascript>
función updateBook(e) {}
    var xml = e.responseXML
    var id = xml.getElementsByTagName("book").getAttribute("id")
    $("libro" id "_title") = xml.getElementsByTagName("title") [0] .textcontent
}
<g:javascript><g:remotelink action="test" update="foo" onsuccess="updateBook(e)">
    Libro de actualización
</g:remotelink> <g:set var="bookId">book${book.id}</g:set>


<div id="${bookId}">
    <div id="${bookId}_title">El Stand</div>
</div>{code}</g:javascript></g:javascript>

{hidden}


h4. Script Centric Ajax with JavaScript

Script centric Ajax involves actually sending JavaScript back that gets evaluated on the client. An example of this can be seen below:

{code:java}
def showBook() {
    def b = Book.get(params.id)

    response.contentType = "text/javascript"
    String title = b.title.encodeAsJavascript()
    render "\$('book${b.id}_title')='${title}'"
}
{code}
{hidden}

h4. Script centrado en Ajax con JavaScript

Ajax centrado en la secuencia de comandos implica el envío realmente volver JavaScript que se evalúa en el cliente. Un ejemplo de esto puede verse a continuación:

{code: java}
Def showBook() {}
    Def b = Book.get(params.id)

Response.ContentType = "text/javascript"
    Título de cadena = b.title.encodeAsJavascript()
    procesar "\$ ('libro$ {b.id} _title") = '$ {título}' "
}
{code}

{hidden}


The important thing to remember is to set the @contentType@ to @text/javascript@. If you use Prototype on the client the returned JavaScript will automatically be evaluated due to this @contentType@ setting.

Obviously in this case it is critical that you have an agreed client-side API as you don't want changes on the client breaking the server. This is one of the reasons Rails has something like RJS. Although Grails does not currently have a feature such as RJS there is a [Dynamic JavaScript Plugin|http://grails.org/plugin/dynamic-javascript] that offers similar capabilities.

h4. Responding to both Ajax and non-Ajax requests

It's straightforward to have the same Grails controller action handle both Ajax and non-Ajax requests. Grails adds the @isXhr()@ method to @HttpServletRequest@ which can be used to identify Ajax requests. For example you could render a page fragment using a template for Ajax requests or the full page for regular HTTP requests:

{code:java}
def listBooks() {
    def books = Book.list(params)
    if (request.xhr) {
        render template: "bookTable", model: [books: books]
    } else {
        render view: "list", model: [books: books]
    }
}
{code}
{hidden}

Lo importante para recordar es establecer el contentType @ @ a @ text/javascript @. Si utiliza el prototipo en el cliente que JavaScript devuelto automáticamente será evaluado debido a este contentType @ @ configuración.

Obviamente en este caso es fundamental que tengan una API de cliente acordada como no quieren cambios en el cliente rompiendo el servidor. Esta es una de las razones carriles tiene algo parecido RJS. Aunque Grails actualmente no tiene una función como RJS allí es un [dinámico JavaScript Plugin|http://grails.org/plugin/dynamic-javascript] ofrece capacidades similares.

h4. Respondiendo a Ajax y peticiones no Ajax

Es fácil tener la misma acción de controlador de Grails manejar Ajax y peticiones Ajax no. Grails agrega el @ isXhr() @ método a @ HttpServletRequest @ que puede utilizarse para identificar las solicitudes de Ajax. Por ejemplo podría representar un fragmento de la página utilizando una plantilla para peticiones Ajax o la página completa para regulares solicitudes HTTP:

{code: java}
Def listBooks() {}
    libros de Def = Book.list(params)
    Si (request.xhr) {}
        plantilla de procesamiento: "bookTable", modelo: [libros: libros]
    } else {}
        vista de procesamiento: "lista", modelo: [libros: libros]
    }
}
{code}
