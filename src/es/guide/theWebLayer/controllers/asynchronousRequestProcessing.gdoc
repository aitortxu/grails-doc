
{hidden}

Grails support asynchronous request processing as provided by the Servlet 3.0 specification. To enable the async features you need to set your servlet target version to 3.0 in BuildConfig.groovy:

{code}
grails.servlet.version = "3.0"
{code}

With that done ensure you do a clean re-compile as some async features are enabled at compile time.

{note}
With a Servlet target version of 3.0 you can only deploy on Servlet 3.0 containers such as Tomcat 7 and above.
{hidden}

Grails admiten el procesamiento de la solicitud asincrónica conforme a lo dispuesto por la especificación de Servlet 3.0. Para habilitar las características asincrónicas necesita establecer el destino de servlet 3.0 en BuildConfig.groovy:

{code}
Grails.servlet.Version = "3.0"
{code}

Con asegurar que haces un re-compile limpio como algunas características de async están habilitados en tiempo de compilación.

{Nota}
Con una versión de destino de Servlet 3.0 sólo puede desplegar en contenedores Servlet 3.0 como 7 Tomcat y encima.

{hidden}

{note}

h4. Asynchronous Rendering

You can render content (templates, binary data etc.) in an asynchronous manner by calling the @startAsync@ method which returns an instance of the Servlet 3.0 @AsyncContext@. Once you have a reference to the @AsyncContext@ you can use Grails' regular render method to render content:

{code}
def index() {
    def ctx = startAsync()
    ctx.start {
        new Book(title:"The Stand").save()
        render template:"books", model:[books:Book.list()]
        ctx.complete()
    }
}
{code}
{hidden}

{Nota}

h4. Procesamiento asincrónico

Puede representar el contenido (plantillas, datos binarios etc.) de manera asincrónica llamando la @ startAsync @ método que devuelve una instancia del Servlet 3.0 @ AsyncContext @. Una vez que tenga una referencia a la @ AsyncContext @ puede utilizar el método de procesamiento regular de Grails para representar el contenido:

{code}
Def índice() {}
    Def ctx = startAsync()
    CTX.Start {}
        nuevo libro (título: "la Stand").save()
        plantilla de procesamiento: "libros", model:[books:Book.list()]
        CTX.Complete()
    }
}
{code}

{hidden}


Note that you must call the @complete()@ method to terminate the connection. 

h4. Resuming an Async Request

You resume processing of an async request (for example to delegate to view rendering) by using the @dispatch@ method of the @AsyncContext@ class:

{code}
def index() {
    def ctx = startAsync()
    ctx.start {
        // do working
        ...
        // render view
        ctx.dispatch()
    }
}
{code}
{hidden}

Tenga en cuenta que debe llamar la @ complete() @ método para terminar la conexión. 

h4. Reanudar una solicitud asincrónica

Reanudar el procesamiento de una solicitud asincrónica (por ejemplo para delegar a ver representación) utilizando el envío @ @ método de @ AsyncContext @ clase:

{code}
Def índice() {}
    Def ctx = startAsync()
    CTX.Start {}
        / / do trabajo
        ...
        / / vista de procesamiento
        CTX.Dispatch()
    }
}
{code}
