
{hidden}

h4. Creating a controller

Controllers can be created with the [create-controller|commandLine] or [generate-controller|commandLine] command. For example try running the following command from the root of a Grails project:

{code:java}
grails create-controller book
{code}

The command will create a controller at the location @grails-app/controllers/myapp/BookController.groovy@:

{hidden}

h4. Creación de un controlador

Los controladores pueden crearse con el [controller|commandLine crear] o [controller|commandLine generar] comando. Por ejemplo, intente ejecutar el comando siguiente desde la raíz de un proyecto de Grails:

{code: java}
libro de crear controladores de Grails
{code}

El comando creará un controlador en la ubicación @ grails-app/controllers/myapp/BookController.groovy@:

{hidden}

{code:java}
package myapp

class BookController {

    def index() { }
}
{code}

where "myapp" will be the name of your application, the default package name if one isn't specified.
{hidden}

{code: java}
paquete myapp

clase BookController {}

Def índice() {}
}
{code}

donde "myapp" será el nombre de la aplicación, el nombre del paquete predeterminado si no se especifica.

{hidden}


@BookController@ by default maps to the /book URI (relative to your application root).

{note}
The @create-controller@ and @generate-controller@ commands are just for convenience and you can just as easily create controllers using your favorite text editor or IDE
{note}

h4. Creating Actions

A controller can have multiple public action methods; each one maps to a URI:
{hidden}

@ BookController @ por defecto se asigna a la /libro URI (relativos a la raíz de la aplicación).

{Nota}
El @ crear-controlador @ y @ generar-controlador @ comandos son sólo por conveniencia y facilmente puede crear controladores que utilizan su editor de textos preferido o IDE
{Nota}

h4. Creación de acciones

Un controlador puede tener varios métodos de acción pública; cada uno se asigna a un URI:

{hidden}


{code:java}
class BookController {

    def list() {

        // do controller logic
        // create model

        return model
    }
}
{code}
{hidden}

{code: java}
clase BookController {}

Def list() {}

/ / do lógica de controlador
        / / crear modelo

devolver modelo
    }
}
{code}

{hidden}


This example maps to the @/book/list@ URI by default thanks to the property being named @list@.

h4. Public Methods as Actions

In earlier versions of Grails actions were implemented with Closures. This is still supported, but the preferred approach is to use methods.

Leveraging methods instead of Closure properties has some advantages:
* Memory efficient
* Allow use of stateless controllers (@singleton@ scope)
{hidden}

Este ejemplo asigna a la @ / / lista de libros @ URI por defecto gracias a la propiedad de ser denominada lista @ @.

h4. Métodos públicos como acciones

En versiones anteriores de Grails se implementaron acciones con cierres. Esto todavía es compatible, pero el enfoque preferido es utilizar métodos.

Aprovechar los métodos en lugar de propiedades de cierre tiene algunas ventajas:
* Memoria eficiente
* Permitir el uso de controladores apátridos (@ singleton @ alcance)

{hidden}

* You can override actions from subclasses and call the overridden superclass method with @super.actionName()@
* Methods can be intercepted with standard proxying mechanisms, something that is complicated to do with Closures since they're fields.

If you prefer the Closure syntax or have older controller classes created in earlier versions of Grails and still want the advantages of using methods, you can set the @grails.compile.artefacts.closures.convert@ property to true in @BuildConfig.groovy@:
{code}
grails.compile.artefacts.closures.convert = true
{code}

and a compile-time AST transformation will convert your Closures to methods in the generated bytecode.

{hidden}

* Puede anular las acciones de subclases y llame al método de la superclase reemplazado con @ super.actionName() @
* Métodos pueden ser interceptadas con mecanismos proxy estándar, algo que es complicado hacer con cierres pues son campos.

Si prefiere la sintaxis de cierre o tener mayores clases de controlador creadas en versiones anteriores de Grails y aún desea las ventajas de utilizar métodos, puede establecer la propiedad @grails.compile.artefacts.closures.convert@ en true en @ BuildConfig.groovy@:
{code}
Grails.Compile.artefacts.Closures.Convert = true
{code}

y una transformación de AST compilación convertirá sus cierres a métodos en el bytecode generado.

{hidden}

h4. The Default Action

A controller has the concept of a default URI that maps to the root URI of the controller, for example @/book@ for @BookController@. The action that is called when the default URI is requested is dictated by the following rules:

* If there is only one action, it's the default
* If you have an action named @index@, it's the default
* Alternatively you can set it explicitly with the @defaultAction@ property:

{code:java}
static defaultAction = "list"
{code}
{hidden}

h4. La acción predeterminada

Un controlador tiene el concepto de un URI que se asigna a la raíz URI del responsable del tratamiento, por ejemplo @ por defecto / libro para @ BookController @. La acción que se llama cuando se solicita la URI por defecto es dictada por las reglas siguientes:

* Si hay sólo una acción, es el predeterminado
* Si tienes una acción denominada índice @ @, es el predeterminado
* También se puede establecer explícitamente con @ defaultAction @ propiedad:

{code: java}
defaultAction estática = "lista"
{code}
