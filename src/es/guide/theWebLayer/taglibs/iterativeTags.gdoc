
{hidden}

Iterative tags are easy too, since you can invoke the body multiple times:

{code:java}
def repeat = { attrs, body ->
    attrs.times?.toInteger()?.times { num ->
        out << body(num)
    }
}
{code}

{hidden}

Etiquetas iterativos son fáciles demasiado, ya que puede invocar el cuerpo varias veces:

{code: java}
Def repetición = {attrs, cuerpo->
    attrs.Times?.toInteger()?.veces {num->
        a << body(num)
    }
}
{code}

{hidden}

In this example we check for a @times@ attribute and if it exists convert it to a number, then use Groovy's @times@ method to iterate the specified number of times:

{code:xml}
<g:repeat times="3">
<p>Repeat this 3 times! Current repeat = ${it}</p>
</g:repeat>
{code}

Notice how in this example we use the implicit @it@ variable to refer to the current number. This works because when we invoked the body we passed in the current value inside the iteration:

{hidden}

En este ejemplo que nos busque una veces @ @ atributo y si existe convertir en un número y, a continuación, utilizar @ veces de Groovy @ método para recorrer en el número de veces especificado:

{Código: xml}<g:repeat times="3">
<p>Repita este 3 veces! Repetición actual = ${se}</p>
</g:repeat>{code}

Observe cómo en este ejemplo utilizamos la implícita @ TI @ variable para hacer referencia a la cantidad actual. Esto funciona porque cuando invoca el cuerpo nos cruzamos en el valor actual dentro de la iteración:

{hidden}

{code:java}
    out << body(num)
{code}

That value is then passed as the default variable @it@ to the tag. However, if you have nested tags this can lead to conflicts, so you should should instead name the variables that the body uses:

{code:java}
def repeat = { attrs, body ->
    def var = attrs.var ?: "num"
    attrs.times?.toInteger()?.times { num ->
        out << body((var):num)
    }
}
{code}
{hidden}

{code: java}
    cabo << body(num) {código} Que valor es entonces pasa como la predeterminada variable @ ti @ a la etiqueta. sin Embargo, si ha anidado etiquetas esto puede conducir a conflictos, por lo que debe debe nombrar en su lugar las variables que utiliza el cuerpo: {código: java} def repetición = {attrs, cuerpo->
    Def var = attrs.var?: "num"
    attrs.Times?.toInteger()?.veces {num->
        a << body((var):num)
    }
}
{code}

{hidden}


Here we check if there is a @var@ attribute and if there is use that as the name to pass into the body invocation on this line:

{code:java}
    out << body((var):num)
{code}

{note}
Note the usage of the parenthesis around the variable name. If you omit these Groovy assumes you are using a String key and not referring to the variable itself.
{note}
{hidden}

Aquí se comprueba si hay un var @ @ atributo y si hay utilizar como nombre para pasar a la invocación del cuerpo en esta línea:

{code: java}
    a << body((var):num)
{code}

{Nota}
Tenga en cuenta el uso de paréntesis en el nombre de la variable. Si omite estas Groovy supone están utilizando una clave de cadena y no se refiere a la propia variable.
{Nota}

{hidden}


Now we can change the usage of the tag as follows:

{code:xml}
<g:repeat times="3" var="j">
<p>Repeat this 3 times! Current repeat = ${j}</p>
</g:repeat>
{code}

Notice how we use the @var@ attribute to define the name of the variable @j@ and then we are able to reference that variable within the body of the tag.
{hidden}

Ahora podemos cambiar el uso de la etiqueta como sigue:

{Código: xml}<g:repeat times="3" var="j">
<p>Repita este 3 veces! Repetición actual = ${j}</p>
</g:repeat>{code}

Observe cómo utilizamos el var @ @ atributo para definir el nombre de la variable @ j @ y, a continuación, somos capaces de hacer referencia a la variable dentro del cuerpo de la etiqueta.
