
{hidden}

By default, tags are added to the default Grails namespace and are used with the @g:@ prefix in GSP pages. However, you can specify a different namespace by adding a static property to your @TagLib@ class:

{code:java}
class SimpleTagLib {
    static namespace = "my"

    def example = { attrs ->
        ...
    }
}
{code}
{hidden}

De forma predeterminada, las etiquetas se añaden a los nombres de Grails predeterminado y se usan con g: @ @ prefijo en las páginas del SGP. Sin embargo, puede especificar otro espacio de nombres mediante la adición de una propiedad estática a la @ TagLib @ clase:

{code: java}
clase SimpleTagLib {}
    estática namespace = "mi"

ejemplo de Def = {attrs->
        ...
    }
}
{code}

{hidden}


Here we have specified a @namespace@ of @my@ and hence the tags in this tag lib must then be referenced from GSP pages like this:

{code:xml}
<my:example name="..." />
{code}

where the prefix is the same as the value of the static @namespace@ property. Namespaces are particularly useful for plugins.

Tags within namespaces can be invoked as methods using the namespace as a prefix to the method call:
{hidden}

Aquí hemos especificado un @ namespace @ de @ mi @ y ahí las etiquetas en este lib de etiqueta, a continuación, hacer referencia desde las páginas del SGP como este:

{Código: xml}
<my:example name="..."></my:example>
{code}

donde el prefijo es igual al valor de la estática @ namespace @ propiedad. Espacios de nombres son particularmente útiles para plugins.

Etiquetas dentro de los espacios de nombres pueden invocarse como métodos utilizando el espacio de nombres como prefijo a la llamada al método:

{hidden}


{code:java}
out << my.example(name:"foo")
{code}

This works from GSP, controllers or tag libraries
{hidden}

{code: java}
a << my.example(name:"foo")
{code}

Esto funciona de SGP, controladores o bibliotecas de etiquetas
