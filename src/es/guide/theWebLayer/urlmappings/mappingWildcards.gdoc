
{hidden}

Grails' URL mappings mechanism also supports wildcard mappings. For example consider the following mapping:

{code:java}
static mappings = {
    "/images/*.jpg"(controller: "image")
}
{code}

This mapping will match all paths to images such as @/image/logo.jpg@. Of course you can achieve the same effect with a variable:

{hidden}

Mecanismo de asignaciones de dirección URL de Grails también admite asignaciones comodín. Por ejemplo, considere la siguiente asignación:

{code: java}
asignaciones estáticas = {}
    "/images/*.jpg" (controlador: "imagen")
}
{code}

Esta asignación hará coincidir todos los caminos a las imágenes como @ / image/logo.jpg@. Por supuesto puede lograr el mismo efecto con una variable:

{hidden}

{code:java}
static mappings = {
    "/images/$name.jpg"(controller: "image")
}
{code}

However, you can also use double wildcards to match more than one level below:

{code:java}
static mappings = {
    "/images/**.jpg"(controller: "image")
}
{code}
{hidden}

{code: java}
asignaciones estáticas = {}
    "/images/$name.jpg" (controlador: "imagen")
}
{code}

Sin embargo, también puede utilizar caracteres comodín doble para coincidir con más de un nivel inferior:

{code: java}
asignaciones estáticas = {}
    "/images/**.jpg" (controlador: "imagen")
}
{code}

{hidden}


In this cases the mapping will match @/image/logo.jpg@ as well as @/image/other/logo.jpg@. Even better you can use a double wildcard variable:

{code:java}
static mappings = {
    // will match /image/logo.jpg and /image/other/logo.jpg
    "/images/$name**.jpg"(controller: "image")
}
{code}

{hidden}

En este caso la asignación coincidirá con @/image/logo.jpg@, así como @ / image/other/logo.jpg@. Mejor aún puede utilizar una variable comodín doble:

{code: java}
asignaciones estáticas = {}
    / / /image/logo.jpg y /image/other/logo.jpg
    "/images/$name**.jpg" (controlador: "imagen")
}
{code}

{hidden}

In this case it will store the path matched by the wildcard inside a @name@ parameter obtainable from the [params|controllers] object:

{code:java}
def name = params.name
println name // prints "logo" or "other/logo"
{code}

If you use wildcard URL mappings then you may want to exclude certain URIs from Grails' URL mapping process. To do this you can provide an @excludes@ setting inside the @UrlMappings.groovy@ class:

{code:java}
class UrlMappings {
    static excludes = ["/images/*", "/css/*"]
    static mappings = {
        ...
    }
}
{code}
{hidden}

En este caso almacenará la ruta igualada por el comodín de un nombre @ @ parámetro puede obtenerse desde el objeto [params|controllers]:

{code: java}
nombre Def = params.name
nombre de Console.println / / imprimirá "logo" o "otros / logo"
{code}

Si utiliza las asignaciones de dirección URL de comodín puede excluir a determinadas URIs del proceso de asignación de dirección URL de Grails. Para ello puede proporcionar un @ excluye @ ajuste dentro de la clase @UrlMappings.groovy@:

{code: java}
clase UrlMappings {}
    Static excluye = ["/ images / *", "/ css / *"]
    asignaciones estáticas = {}
        ...
    }
}
{code}

{hidden}


In this case Grails won't attempt to match any URIs that start with @/images@ or @/css@.
{hidden}

En este caso no tratan de Grails para que coincidan con cualquier URI que comienzan con / imágenes @ o @ / css @.
