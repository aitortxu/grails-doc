
{hidden}

In order to _transition_ execution of a flow from one state to the next you need some way of trigger an _event_ that indicates what the flow should do next. Events can be triggered from either view states or action states.

h4. Triggering Events from a View State

As discussed previously the start state of the flow in a previous code listing deals with two possible events. A @checkout@ event and a @continueShopping@ event:

{code:java}
def shoppingCartFlow = {
    showCart {
        on("checkout").to "enterPersonalDetails"
        on("continueShopping").to "displayCatalogue"
    }
    ...
}
{code}
{hidden}

En orden a la ejecución de _transition_ de un flujo de un Estado a otro necesita alguna forma de desencadenador de una _event_ que indica lo que debe hacer el flujo. Eventos pueden activarse desde ver los Estados o Estados de acción.

h4. Activación de eventos desde un Estado de vista

Como comentamos anteriormente el estado de inicio del flujo en un listado de código anterior ocupa dos posibles eventos. @ Retirada @ evento y @ continueShopping @ evento:

{code: java}
Def shoppingCartFlow = {}
    showCart {}
        on("Checkout").to "enterPersonalDetails"
        on("continueShopping").to "displayCatalogue"
    }
    ...
}
{code}

{hidden}


Since the @showCart@ event is a view state it will render the view @grails-app/book/shoppingCart/showCart.gsp@. Within this view you need to have components that trigger flow execution. On a form this can be done use the [submitButton|tags] tag:

{code:xml}
<g:form action="shoppingCart">
    <g:submitButton name="continueShopping" value="Continue Shopping" />
    <g:submitButton name="checkout" value="Checkout" />
</g:form>
{code}

{hidden}

Desde la @ showCart @ evento es un Estado de vista representará la vista @ grails-app/book/shoppingCart/showCart.gsp@. Dentro de esta vista necesita tener componentes que desencadenan la ejecución de flujo. En un formulario puede utilizar la etiqueta [submitButton|tags]:

{Código: xml}
<g:form action="shoppingCart"><g:submitbutton name="continueShopping" value="Continue Shopping"><g:submitbutton name="checkout" value="Checkout"></g:submitbutton></g:submitbutton>
    
    
</g:form>
{code}

{hidden}

The form must submit back to the @shoppingCart@ flow. The name attribute of each [submitButton|tags] tag signals which event will be triggered. If you don't have a form you can also trigger an event with the [link|tags] tag as follows:

{code:xml}
<g:link action="shoppingCart" event="checkout" />{code}

h4. Triggering Events from an Action

To trigger an event from an @action@ you invoke a method. For example there is the built in @error()@ and @success()@ methods. The example below triggers the @error()@ event on validation failure in a transition action:

{code:java}
{hidden}

El formulario deberá presentar a la @ shoppingCart @ flujo. El atributo name de cada etiqueta [submitButton|tags] indica qué evento se activará. Si no tienes un formulario también puede desencadenar un evento con la etiqueta [link|tags] como sigue:

{Código: xml}
<g:link action="shoppingCart" event="checkout"> </g:link>{código}

h4. Activación de eventos de una acción

Para desencadenar un evento desde una acción @ @ invocar un método. Por ejemplo, es la construcción en @ error() @ y @ success() @ métodos. El ejemplo siguiente activa el @ error() @ evento de error de validación en una acción de transición:

{code: java}

{hidden}

enterPersonalDetails {
   on("submit") {
         def p = new Person(params)
         flow.person = p
         if (!p.validate()) return error()
   }.to "enterShipping"
   on("return").to "showCart"
}
{code}

In this case because of the error the transition action will make the flow go back to the @enterPersonalDetails@ state.

With an action state you can also trigger events to redirect flow:

{code:java}
{hidden}

enterPersonalDetails {}
   on("Submit") {}
         Def p = Person(params) nueva
         Flow.person = p
         Si (! p.validate()) devolver error()
   } .a "enterShipping"
   on("Return").to "showCart"
}
{code}

En este caso debido al error de la acción de transición hará que el flujo de volver a @ enterPersonalDetails @ Estado.

Con un Estado de acción también puede desencadenar eventos para redirigir el flujo:

{code: java}

{hidden}

shippingNeeded {
   action {
       if (params.shippingRequired) yes()
       else no()
   }
   on("yes").to "enterShipping"
   on("no").to "enterPayment"
}{code}

{hidden}

shippingNeeded {}
   acción {}
       Si yes() (params.shippingRequired)
       Else no()
   }
   on("Yes").to "enterShipping"
   on("no").to "enterPayment"
} {code}
