
{hidden}

As mentioned before a flow has a defined start and end state. A start state is the state which is entered when a user first initiates a conversation (or flow). The start state of a Grails flow is the first method call that takes a block. For example:

{code:java}
class BookController {
   ...
   def shoppingCartFlow ={
       showCart {
           on("checkout").to "enterPersonalDetails"
           on("continueShopping").to "displayCatalogue"
       }
       ...
       displayCatalogue {
           redirect(controller: "catalogue", action: "show")
       }
       displayInvoice()
   }
}
{code}
{hidden}

Como se mencionó antes un flujo tiene un estado inicial y final definido. Un Estado de inicio es la que aparece cuando un usuario inicia primero una conversación (o flujo). El estado de inicio de un flujo de Grails es la primera llamada de método que toma un bloque. Por ejemplo:

{code: java}
clase BookController {}
   ...
   Def shoppingCartFlow = {}
       showCart {}
           on("Checkout").to "enterPersonalDetails"
           on("continueShopping").to "displayCatalogue"
       }
       ...
       displayCatalogue {}
           redirigir (controlador: "Catálogo", acción: "Mostrar")
       }
       displayInvoice()
   }
}
{code}

{hidden}


Here the @showCart@ node is the start state of the flow. Since the showCart state doesn't define an action or redirect it is assumed be a [view state|guide:actionStatesAndViewStates] that, by convention, refers to the view  @grails-app/views/book/shoppingCart/showCart.gsp@.

Notice that unlike regular controller actions, the views are stored within a directory that matches the name of the flow: @grails-app/views/book/shoppingCart@.

The @shoppingCart@ flow also has two possible end states. The first is @displayCatalogue@ which performs an external redirect to another controller and action, thus exiting the flow. The second is @displayInvoice@ which is an end state as it has no events at all and will simply render a view called @grails-app/views/book/shoppingCart/displayInvoice.gsp@ whilst ending the flow at the same time.

Once a flow has ended it can only be resumed from the start state, in this case @showCart@, and not from any other state.
{hidden}

Aquí la @ showCart @ nodo es el estado de inicio del flujo. Desde el estado de showCart no define una acción o redirección se supone ser un [state|guide:actionStatesAndViewStates de vista] que, por Convención, se refiere a la vista @ grails-app/views/book/shoppingCart/showCart.gsp@.

Observe que a diferencia de las acciones de controlador regular, las opiniones están almacenadas en un directorio que coincida con el nombre del flujo: @ grails-app/views/libro/shoppingCart @.

@ ShoppingCart @ flujo también tiene dos Estados posibles finales. La primera es @ displayCatalogue @ que realiza un redireccionamiento externo a otro controlador y acción, saliendo así el flujo. El segundo es @ displayInvoice @ que es un estado final ya que no tiene ningún evento y simplemente representará una vista denominada @grails-app/views/book/shoppingCart/displayInvoice.gsp@ mientras terminando el flujo al mismo tiempo.

Una vez que ha finalizado un flujo sólo se pueden reanudar desde el estado de inicio, en este caso @ showCart @ y no de cualquier otro Estado.
