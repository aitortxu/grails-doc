
{hidden}

h4. Validation Basics

Call the [validate|domainClasses] method to validate a domain class instance:

{code:java}
def user = new User(params)

if (user.validate()) {
    // do something with user
}
else {
    user.errors.allErrors.each {
        println it
    }
}
{code}
{hidden}

h4. Conceptos básicos de validación

Llamar al método [validate|domainClasses] para validar una instancia de la clase de dominio:

{code: java}
Def usuario = User(params) nueva

Si ({user.validate())}
    / / hacer algo con el usuario
}
Else {}
    User.Errors.allErrors.each {}
        Console.println se
    }
}
{code}

{hidden}


The @errors@ property on domain classes is an instance of the Spring [Errors|api:org.springframework.validation.Errors] interface. The @Errors@ interface provides methods to navigate the validation errors and also retrieve the original values.

h4. Validation Phases

Within Grails there are two phases of validation, the first one being [data binding|guide:dataBinding] which occurs when you bind request parameters onto an instance such as:

{code:java}
def user = new User(params)
{code}
{hidden}

Los errores de @ @ propiedad en clases de dominio es una instancia de la interfaz de primavera [Errors|api:org.springframework.validation.Errors]. Los errores de @ @ interfaz proporciona métodos para desplazarse por los errores de validación y también recuperar los valores originales.

h4. Fases de validación

En Grails hay dos fases de validación, el primero un ser [datos binding|guide:dataBinding] que se produce cuando se enlaza como parámetros de la petición en una instancia:

{code: java}
Def usuario = User(params) nueva
{code}

{hidden}


At this point you may already have errors in the @errors@ property due to type conversion (such as converting Strings to Dates). You can check these and obtain the original input value using the @Errors@ API:

{code:java}
if (user.hasErrors()) {
    if (user.errors.hasFieldErrors("login")) {
        println user.errors.getFieldError("login").rejectedValue
    }
}
{code}
{hidden}

En este punto ya puede tener errores en los errores @ @ propiedad debido a la conversión de tipos (como la conversión de cadenas a las fechas). Puede comprobar estos y obtener el valor de entrada original usando la API de @ errores @:

{code: java}
Si ({user.hasErrors())}
    Si ({user.errors.hasFieldErrors("login"))}
        Console.println user.errors.getFieldError("login").rejectedValue
    }
}
{code}

{hidden}


The second phase of validation happens when you call [validate|domainClasses] or [save|domainClasses]. This is when Grails will validate the bound values againts the [constraints|domainClasses] you defined. For example, by default the [save|domainClasses] method calls @validate@ before executing, allowing you to write code like:

{code:java}
if (user.save()) {
    return user
}
else {
    user.errors.allErrors.each {
        println it
    }
}
{code}
{hidden}

La segunda fase de validación ocurre cuando llames [validate|domainClasses] o [save|domainClasses]. Esto es cuando Grails validará los valores enlazados contra [constraints|domainClasses] que ha definido. Por ejemplo, de forma predeterminada el método [save|domainClasses] llamadas @ validan antes de ejecutar, lo que le permite escribir código como:

{code: java}
Si ({user.save())}
    usuario
}
Else {}
    User.Errors.allErrors.each {}
        Console.println se
    }
}
{code}
