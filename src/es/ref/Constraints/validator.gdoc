
{hidden}

h1. validator

h2. Purpose

Adds custom validation to a field.

h2. Examples

{code:java}
even validator: {
    return (it % 2) == 0
}

password1 validator: { val, obj ->
    obj.password2 == val
}

magicNumber validator: someClosureWithTwoParameters

// This one assumes you have an error message defined like
// this (wrapped here only for display purposes):
// classname.propertyName.custom.error=
       My error shows arguments {3} and {4} for value {0}
otherProperty validator: { return ['custom.error', arg1, arg2] }

// The following example does not use custom validation.
// A custom message may be defined in messages.properties:
// user.username.blank=Please enter a username
// which will be used instead of default.blank.message
class User {

    String username

    static constraints = {
        username blank: false
    }
}

// In the following example, custom validation is used:
// user.username.validator.invalid=Please enter a username
class User {

    String username

    static constraints = {
        username validator: {
            return it.length != 0
        }
    }
}

// The following might define the error message as:
// user.username.invalid.bountyhunter=Invalid bounty hunter ({2}) tried to log in.
class User {

    String username

    static constraints = {
        username validator: {
            if (!it.startsWith('boba')) return ['invalid.bountyhunter']
        }
    }
}
{code}
{hidden}

h1. Validador

h2. Fin

Agrega validación personalizada a un campo.

h2. Ejemplos

{code: java}
incluso validador: {}
    Volver (% 2) == 0
}

Validador de Contraseña1: {val, obj->
    obj.password2 == val
}

Validador de magicNumber: someClosureWithTwoParameters

/ / Este uno asume que tiene un mensaje de error definido como
y esto (envuelto aquí sólo para propósitos de visualización):
/ / classname.propertyName.custom.error=
       Mi error muestra argumentos {3} y {4} para el valor {0}
Validador de otherProperty: {return ['custom.error', arg1 y arg2]}

/ / En el siguiente ejemplo no utilizar la validación personalizada.
/ / Un mensaje personalizado puede ser definido en messages.properties:
/ / user.username.blank=Please Ingrese un nombre de usuario
/ / que se utilizará en lugar de default.blank.message
clase usuario {}

String username

restricciones estáticas = {}
        nombre de usuario en blanco: falso
    }
}

/ / En el siguiente ejemplo, se utiliza la validación personalizada:
/ / user.username.validator.invalid=Please Ingrese un nombre de usuario
clase usuario {}

String username

restricciones estáticas = {}
        Validador de nombre de usuario: {}
            volver a it.length! = 0
        }
    }
}

/ / Siguiente podría definir el mensaje de error como:
/ / user.username.invalid.bountyhunter=Invalid bounty hunter ({2}) intentó iniciar sesión.
clase usuario {}

String username

restricciones estáticas = {}
        Validador de nombre de usuario: {}
            Si (! it.startsWith('boba')) regresar ['invalid.bountyhunter']
        }
    }
}
{code}

{hidden}


h2. Description

A custom validator is implemented by a Closure that takes up to three parameters. If the Closure accepts zero or one parameter, the parameter value will be the one being validated ("it" in the case of a zero-parameter Closure). If it accepts two parameters the first is the value and the second is the domain class instance being validated. This is useful when your validation needs access to other fields, for example when checking that two entered passwords are the same. If it accepts three parameters the first is the value, the second is the instance, and the third is the Spring @Errors@ object.

The closure can return:

* @null@ or @true@ (or no return value) to indicate that the value is valid
* @false@ to indicate an invalid value and use the default message code
* a string to indicate the error code to append to the "classname.propertName." string used to resolve the error message. If a field-specific message cannot be resolved, the error code itself will be resolved allowing for global error messages.
{hidden}

h2. Descripción

Un validador personalizado es ejecutado por un cierre que toma hasta tres parámetros. Si el cierre acepta cero o un parámetro, el valor del parámetro será el uno que se está validando ("que" en el caso de un cierre de parámetro de cero). Si acepta dos parámetros, el primero es el valor y la segunda es la instancia de clase de dominio que se está validada. Esto es útil cuando su validación necesita acceso a otros campos, por ejemplo al comprobar que dos introducido contraseñas es los mismos. Si acepta tres parámetros el primero es el valor, la segunda es la instancia y la tercera es el primavera @ errores @ objeto.

El cierre puede devolver:

* @ null @ o @ verdadero @ (o no devuelve ningún valor) para indicar el valor es válido
* @ @ es false para indicar un valor no válido y utilizar el código de mensaje predeterminado
* una cadena para indicar el código de error para anexar a la cadena "classname.propertName." para resolver el mensaje de error. Si un mensaje específico de campo no se resuelve, se resolverá el propio código de error que permite mensajes de error global.

{hidden}

* a list containing a string as above, and then any number of arguments following it, which are used as formatted message arguments indexed at 3 onwards. See @grails-app/i18n/message.properties@ to see how the default error message codes use the arguments.

In the case of a three-parameter Closure the return value is ignored since it is expected the the @Errors@ object will be updated directly.

The Closure also has access to the name of the field that the constraint applies to using @propertyName@:
{code:java}
myField validator: { val, obj -> return propertyName == "myField" }
{code}

Error Code: @className.propertyName.validator.error@
{hidden}

* una lista que contiene una cadena que el anterior y, a continuación, cualquier número de argumentos siguientes, que son utilizados como argumentos de mensajes con formato indizado en 3 en adelante. Consulte @grails-app/i18n/message.properties@ para ver cómo los códigos de mensaje de error predeterminado utilizan los argumentos.

En el caso de un cierre de tres parámetro se omite el valor devuelto ya que se prevé los errores @ @ objeto se actualizará directamente.

El cierre también tiene acceso al nombre del campo que se aplica la restricción al uso de @ propertyName @:
{code: java}
Validador de myField: {val, obj-> retorno propertyName == "myField"}
{code}

Código de error: @className.propertyName.validator.error@
