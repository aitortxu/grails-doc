
{hidden}

h1. allowedMethods

h2. Purpose

Limits access to controller actions based on the HTTP request method, sending a 405 (Method Not Allowed) error code when an incorrect HTTP method is used.

h2. Examples

{code}
class PersonController {
    // action1 may be invoked from a POST
    // action2 has no restrictions
    // action3 may be invoked from a POST or DELETE
    static allowedMethods = \[action1:'POST',
                             action3:\['POST', 'DELETE'\]\]
    def action1() { ... }
    def action2() { ... }
    def action3() { ... }
}
{code}
{hidden}

h1. allowedMethods

h2. Fin

Límites de acceso a acciones de controlador basadas en el método de petición HTTP, enviando un código de error 405 (método no permitido) cuando se utiliza un método HTTP incorrecto.

h2. Ejemplos

{code}
clase PersonController {}
    / / action1 se puede invocar desde un puesto
    / / action2 no tiene restricciones
    / / action3 se puede invocar desde un puesto o eliminar
    estático allowedMethods = \[action1:'POST',
                             action3: \ ['POST', 'Eliminar' \] \]
    Def action1() {...}
    Def action2() {...}
    Def action3() {...}
}
{code}

{hidden}


h2. Description

The @allowedMethods@ property provides a simple declarative syntax to specify which HTTP methods are allowed for your controller actions. By default, all request methods are allowed for all controller actions. The @allowedMethods@ property is optional and only needs to be defined if the controller has actions to be restricted to certain request methods.

You can do these checks programmatically in the controller actions and send a 405 error code yourself, but this tends to clutter the controller methods which should focus more on application logic and routing. This approach might not be sufficient in more complex scenarios, and in those cases it's fine to handle things yourself.

The @allowedMethods@ property is a Map, where the keys are the names of actions to be restricted and the values are either a @String@ or a @List@ of @String@s. If the value is a @String@, it represents the only request method that may be used to invoke that action. If it is a @List@ of @String@s the @List@ it represents all of the request methods that may be used to invoke that action. If the specified restrictions are violated then a 405 error code is returned in the response.

For example this code prevents the @delete@ action from being invoked using an HTTP GET:
{hidden}

h2. Descripción

@ AllowedMethods @ propiedad proporciona una sencilla sintaxis declarativa para especificar los métodos HTTP pueden por sus acciones de controlador. Por defecto, todos los métodos de solicitud son permitidos para todas las acciones de controlador. @ AllowedMethods @ propiedad es opcional y sólo debe definirse si el controlador tiene acciones limitarse a determinados métodos de solicitud.

Se pueden hacer estos controles mediante programación en las acciones de controlador y Envíese un código de 405 error, pero esto tiende a desorden los métodos de controlador que deberían centrarse más en la lógica de la aplicación y el enrutamiento. Este enfoque podría no ser suficiente en escenarios más complejos, y en esos casos está muy bien manejar las cosas usted mismo.

@ AllowedMethods @ propiedad es un mapa, donde las claves son los nombres de las acciones a ser restringido y los valores son una cadena de @ @ o una lista @ @ de @ String@s. Si el valor es una cadena @ @, representa el único método de solicitud que puede ser utilizado para invocar la acción. Si es una lista @ @ de @ String@s @ lista @ representa todos los métodos de solicitud que pueden utilizarse para invocar la acción. Si se violan las restricciones especificadas se devuelve un código de 405 error en la respuesta.

Por ejemplo, este código impide eliminar @ @ acción de ser invocado mediante un GET de HTTP:

{hidden}


{code}
class PersonController {
    def delete() {
        if (request.method == 'GET') {
            // redirect to the list action
            redirect(action: list)
        } else {
            // the rest of the delete action goes here
        }
    }
}
{code}
{hidden}

{code}
clase PersonController {}
    Def delete() {}
        Si (request.method == 'GET') {}
            / / redirigir a la acción de la lista
            Redirect(Action: List)
        } else {}
            / / Aquí va el resto de la acción de eliminación
        }
    }
}
{code}

{hidden}


It could instead return a 405 error code rather than redirecting:

{code}
class PersonController {
    def delete() {
        if (request.method == 'GET') {
            response.sendError(405)
        } else {
            // the rest of the delete action goes here
        }
    }
}
{code}
{hidden}

En su lugar podría devolver un código de 405 error en lugar de redirigir:

{code}
clase PersonController {}
    Def delete() {}
        Si (request.method == 'GET') {}
            Response.sendError(405)
        } else {}
            / / Aquí va el resto de la acción de eliminación
        }
    }
}
{code}

{hidden}


But the cleanest solution is to use @allowedMethods@:

{code}
class PersonController {

    static allowedMethods = \[save: "POST", update: "POST", delete: "POST"\]

    def delete() {
        // the delete logic goes here
    }
}
{code}
{hidden}

Pero la solución más limpia es usar @ allowedMethods @:

{code}
clase PersonController {}

estático allowedMethods = \[save: "POST", actualización: "POST", eliminar: "POST" \]

Def delete() {}
        / / la lógica de eliminar va aquí
    }
}
{code}
