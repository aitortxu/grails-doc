
{hidden}

h1. type

h2. Purpose

Configures the Hibernate type for a particular property.

h2. Examples

Changing to a text type (CLOB or TEXT depending on database dialect):

{hidden}

h1. tipo

h2. Fin

Configura el tipo de hibernación para una propiedad determinada.

h2. Ejemplos

Cambiar a un tipo de texto (CLOB o texto según el dialecto de la base de datos):

{hidden}

{code:java}
class Book {

    String title

    static mapping = {
        title type: "text"
    }
}
{code}
{hidden}

{code: java}
clase {libro

Título de cadena

asignación estática = {}
        tipo de título: "texto"
    }
}
{code}

{hidden}


User types with multiple columns:

{code:java}
class Book {
    ...
    MonetaryAmount amount

    static mapping = {
        amount type: MonetaryUserType, {
            column name: "value"
            column name: "currency", sqlType: "char", length: 3
        }
    }
}
{code}
{hidden}

Tipos de usuario con varias columnas:

{code: java}
clase {libro
    ...
    Cantidad de MonetaryAmount

asignación estática = {}
        importe tipo: MonetaryUserType {}
            nombre de la columna: "valor"
            nombre de la columna: "moneda", sqlType: "char", longitud: 3
        }
    }
}
{code}

{hidden}


h2. Description

Usage: @association_name(type:string/class)@

Hibernate will attempt to automatically select the appropriate database type from the field typed based on configuration in the @Dialect@ class that is being used. But you can override the defaults if necessary. For example @String@ values are mapped by default to @varchar(255)@ columns. To store larger @String@ values you can use a @text@ type instead:

{code:java}
static mapping = {
    title type: "text"
}
{code}
{hidden}

h2. Descripción

Uso: @ association_name(type:string/class) @

Hibernación intentará seleccionar automáticamente el tipo de base de datos adecuada del campo ha escrito basado en configuración en el dialecto @ @ clase que se utiliza. Pero puede reemplazar los valores predeterminados si es necesario. Por ejemplo @ String @ valores se asignan por defecto a @ VARCHAR @ columnas. Para almacenar la mayor cadena de @ @ valores puede utilizar en su lugar un texto @ @ tipo:

{code: java}
asignación estática = {}
    tipo de título: "texto"
}
{code}

{hidden}


Hibernate also has the concept of custom @UserType@ implementations. In this case you specify the @UserType@ class. If the @UserType@ maps to multiple columns you may need to specify a mapping for each column:

{code:java}
static mapping = {
    amount type: MonetaryUserType, {
        column name: "value"
        column name: "currency", sqlType: "char", length: 3
    }
}
{code}
{hidden}

Hibernación tiene también el concepto de personalizado @ UserType @ implementaciones. En este caso se especifica @ UserType @ clase. Si @ UserType @ mapas a varias columnas quizás deba especificar una asignación para cada columna:

{code: java}
asignación estática = {}
    importe tipo: MonetaryUserType {}
        nombre de la columna: "valor"
        nombre de la columna: "moneda", sqlType: "char", longitud: 3
    }
}
{code}
