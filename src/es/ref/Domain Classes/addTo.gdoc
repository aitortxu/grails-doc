
{hidden}

h1. addTo*

h2. Purpose

Adds a domain class relationship for one-to-many or many-to-many relationship, where the relationship is indicated by the property used as the suffix to the method.

h2. Examples

{code:java}
def fictBook = new Book(title: "IT")
def nonFictBook = new Book(title: "On Writing: A Memoir of the Craft")
def a = new Author(name: "Stephen King")
             .addToFiction(fictBook)
             .addToNonFiction(nonFictBook)
             .save()
{code}
{hidden}

h1. Añadir para *

h2. Fin

Agrega una relación de clase de dominio para la relación uno a varios o muchos a muchos, donde la relación es indicada por la propiedad que se utiliza como sufijo al método.

h2. Ejemplos

{code: java}
Def fictBook = nuevo libro (título: "IT")
Def nonFictBook = nuevo libro (título: "El escrito: A memorias de la artesanía")
Def un = nuevo autor (nombre: "Stephen King")
             .addToFiction(fictBook)
             .addToNonFiction(nonFictBook)
             .Save()
{code}

{hidden}


h2. Description

The @addTo*@ method is a dynamic method that uses an association to automatically add instances to the association. It also automatically configures the bi-directional relationship so that both sides are set.

Consider these domain classes which are used in the example above:

{code:java}
class Author {

    String name

    static hasMany = [fiction: Book, nonFiction: Book]
}
{code}
{hidden}

h2. Descripción

AgregarPara @ * @ método es un método dinámico que utiliza una asociación para agregar automáticamente instancias a la asociación. Configura automáticamente la relación bidireccional que ambos lados.

Tenga en cuenta estas clases de dominio que se utilizan en el ejemplo anterior:

{code: java}
clase {autor

Nombre de la cadena

estático hasMany = [ficción: libro de no ficción: libro]
}
{code}

{hidden}


{code:java}
class Book {

    String title

    static belongsTo = [author: Author]
}
{code}

{hidden}

{code: java}
clase {libro

Título de cadena

Static belongsTo = [autor: autor]
}
{code}

{hidden}

The example creates a new fiction book and a new non-fiction book, and an author. @addToFiction@ is a dynamic method that works because the @Fiction@ part corresponds to the @fiction@ collection that results from the @hasMany@ declaration, and likewise for @NonFiction@ and @nonFiction@. After calling @save()@ on the @Author@, the associated @Book@ instances are transitively saved too, even though we didn't call @save()@ on either of them.

In addition, calling addTo* initializes the associated collections, and sets the back-reference of the @author@ property in each @Book@.

There's also a more compact version of the method that accepts a @Map@ instead of a domain class instance:

{code:java}
def a = new Author(name: "Stephen King")
             .addToFiction(title: "IT")
             .addToNonFiction(title: "On Writing: A Memoir of the Craft")
             .save()
{code}
{hidden}

En el ejemplo se crea un nuevo libro de ficción y un nuevo libro de no ficción y un autor. @ addToFiction @ es un método dinámico que funciona porque la ficción @ @ parte corresponde a la ficción @ @ colección que resulta de la @ hasMany @ declaración y asimismo para @ no ficción @ y @ no ficción @. Después de llamar a @ save() @ en el autor @ @, asociado libro @ @ instancias transitoriamente se guardan también, aunque no pedimos @ save() @ a cualquiera de ellos.

Además, llamando AgregarPara * inicializa las colecciones asociadas y establece la referencia de la parte posterior del autor @ @ propiedad en cada libro @ @.

También existe una versión más compacta del método que acepta un mapa @ @ en lugar de una instancia de la clase de dominio:

{code: java}
Def un = nuevo autor (nombre: "Stephen King")
             .addToFiction (título: "IT")
             .addToNonFiction (título: "en escritura: A memorias de la artesanía")
             .Save()
{code}

{hidden}


This works because GORM knows the type that is being added and can use the standard @Map@ constructor to create the instances for you.
{hidden}

Esto funciona porque GORM sabe el tipo que se va a agregar y puede utilizar el mapa @ estándar @ constructor para crear las instancias para usted.
