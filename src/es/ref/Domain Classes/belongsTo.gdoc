
{hidden}

h1. belongsTo

h2. Purpose

Defines a "belongs to" relationship where the class specified by @belongsTo@ assumes ownership of the relationship. This has the effect of controlling how saves and deletes cascade. The exact behaviour depends on the type of relationship:

* Many-to-one/one-to-one: saves and deletes cascade from the owner to the dependant (the class with the @belongsTo@).
* One-to-many: saves always cascade from the one side to the many side, but if the many side has @belongsTo@, then deletes also cascade in that direction.
* Many-to-many: only saves cascade from the "owner" to the "dependant", not deletes.

{hidden}

h1. belongsTo

h2. Fin

Define una relación de "pertenece a" donde la clase especificada por @ belongsTo @ asume la titularidad de la relación. Esto tiene el efecto de controlar cómo ahorra y eliminaciones en cascada. El comportamiento exacto depende del tipo de relación:

* Muchos-a-uno y uno a uno: guarda y elimina en cascada desde el propietario a los dependientes (la clase con el @ belongsTo @).
* Uno para muchos: guarda siempre en cascada de un lado al lado de muchos, pero si el lado muchos tiene @ belongsTo @, a continuación, elimina también conectar en cascada en esa dirección.
* Muchos a muchos: sólo guarda cascada desde el "propietario" a los "dependientes", no se elimina.

{hidden}

h2. Examples

{code:java}
class Book {
   String title

   static belongsTo = [author: Author]
}
{code}

{hidden}

h2. Ejemplos

{code: java}
clase {libro
   Título de cadena

Static belongsTo = [autor: autor]
}
{code}

{hidden}

In this example the @Book@ class specifies that it belongs to the @Author@ class, hence when an @Author@ instance is deleted so are all its associated @Book@ instances.

h2. Description

The @belongsTo@ property abstracts the nature of the cascading behaviour in Hibernate. If you want one class to belong to another but not have a back reference, then you can specify a class or a list of classes as the value:

{code}
class Book {
    static belongsTo = Author
}
{code}
{hidden}

En este ejemplo que el libro @ @ clase especifica que pertenece al autor @ @ clase, por lo tanto cuando se elimina un autor @ @ instancia tan son todos sus asociados @ libro @ instancias.

h2. Descripción

@ BelongsTo @ propiedad abstrae la naturaleza del comportamiento en cascada en hibernación. Si desea una clase pertenecen a otra pero no tiene una referencia posterior, puede especificar una clase o una lista de clases como el valor:

{code}
clase {libro
    Static belongsTo = autor
}
{code}

{hidden}


or:

{code}
class Book {
    static belongsTo = [Author, Library]
}
{code}

Back references, i.e. properties linking back to the owner, can be added in one of two ways:
{hidden}

o:

{code}
clase {libro
    Static belongsTo = [autor, biblioteca]
}
{code}

Las referencias anteriores, es decir, propiedades de vinculación al propietario, pueden agregarse en uno de dos maneras:

{hidden}


{code}
class Book {
    Author author

    static belongsTo = Author
}

{code}

{hidden}

{code}
clase {libro
    Autor de autor

Static belongsTo = autor
}

{code}

{hidden}

or:

{code}
class Book {
    static belongsTo = [author: Author]
}
{code}

In these examples, both techniques create an @Author@ property named @author@. Also, the Map property can specify multiple properties and types if the class belongs to more than one owner.

{hidden}

o:

{code}
clase {libro
    Static belongsTo = [autor: autor]
}
{code}

En estos ejemplos, ambas técnicas crean a un autor @ @ propiedad denominada a @ autor @. Además, la propiedad de mapa puede especificar varias propiedades y tipos si la clase pertenece a más de un propietario.

{hidden}

The @belongsTo@ property is simple and means you don't have to worry about the Hibernate cascading strategies, but if you need more control over cascading you can use the [ORM DSL|guide:ormdsl]. This allows fine grained control of cascading updates and deletes.
{hidden}

@ BelongsTo @ propiedad es simple y medios no tiene que preocuparse acerca de las estrategias de hibernación en cascada, pero si se necesita más control en cascada le puede utilizar [DSL|guide:ormdsl de ORM]. Esto permite el control de grano fino de actualizaciones en cascada y elimina.
