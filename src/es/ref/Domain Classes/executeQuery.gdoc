
{hidden}

h1. executeQuery

h2. Purpose

Executes [HQL queries|guide:hql]

h2. Examples

{code:java}
// simple query
Account.executeQuery("select distinct a.number from Account a")

// using with list of parameters
Account.executeQuery("select distinct a.number from Account a " +
                     "where a.branch = ? and a.created > ?",
                     ['London', lastMonth])

// using with a single parameter and pagination params
Account.executeQuery("select distinct a.number from Account a " +
                     "where a.branch = ?", ['London'],
                     [max: 10, offset: 5])

// using with Map of named parameters
Account.executeQuery("select distinct a.number from Account a " +
                     "where a.branch = :branch",
                     [branch: 'London'])

// using with Map of named parameters and pagination params
Account.executeQuery("select distinct a.number from Account a " +
                     "where a.branch = :branch",
                     [branch: 'London', max: 10, offset: 5])

// same as previous
Account.executeQuery("select distinct a.number from Account a " +
                     "where a.branch = :branch",
                     [branch: 'London'], [max: 10, offset: 5])

// tell underlying Hibernate Query object to not attach newly retrieved
// objects to the session, will only save with explicit @save@
Account.executeQuery("select distinct a.number from Account a",
                     null, [readOnly: true])

// time request out after 18 seconds
Account.executeQuery("select distinct a.number from Account a",
                     null, [timeout: 18])

// have Hibernate Query object return 30 rows at a time
Account.executeQuery("select distinct a.number from Account a",
                     null, [fetchSize: 30])

// modify the FlushMode of the Query (default is @FlushMode.AUTO@)
Account.executeQuery("select distinct a.number from Account a",
                     null, [flushMode: FlushMode.MANUAL])
{code}
{hidden}

h1. executeQuery

h2. Fin

Ejecuta [HQL queries|guide:hql]

h2. Ejemplos

{code: java}
/ / simple consulta
Account.executeQuery ("Seleccione distintas a.number en cuenta un")

/ / con la lista de parámetros
¿Account.ExecuteQuery ("Seleccione distintas a.number en cuenta una" "donde a.branch =? y a.created >? ",
                     ['Londres', lastMonth])

/ / con un único params parámetro y paginación
Account.executeQuery ("Seleccione distintas a.number en cuenta una" "donde a.branch =?", ['Londres'],
                     [máx.: 10, desvío: 5])

/ / usar con mapa de parámetros con nombre
Account.executeQuery ("Seleccione distintas a.number en cuenta una" "donde a.branch =: rama",
                     [rama: 'Londres'])

/ / con mapa de parámetros con nombre y parámetros de paginación
Account.executeQuery ("Seleccione distintas a.number en cuenta una" "donde a.branch =: rama",
                     [rama: 'Londres', máxima: 10, desvío: 5])

/ / igual que el anterior
Account.executeQuery ("Seleccione distintas a.number en cuenta una" "donde a.branch =: rama",
                     [rama: 'Londres'], [máx.: 10, desvío: 5])

y decimos a objeto de hibernación consulta subyacente no adjuntar recién obtenido
/ / objetos del período de sesiones, sólo grabará con explícita @ guardar @
Account.executeQuery ("Seleccione distintas a.number en cuenta un",
                     NULL, [readOnly: verdadero])

/ / solicitud de tiempo de espera después de 18 segundos
Account.executeQuery ("Seleccione distintas a.number en cuenta un",
                     NULL, [timeout: 18])

/ / tiene objeto de consulta de hibernación volver 30 filas en un momento
Account.executeQuery ("Seleccione distintas a.number en cuenta un",
                     NULL, [fetchSize: 30])

/ / modificar la FlushMode de la consulta (el predeterminado es @ FlushMode.AUTO@)
Account.executeQuery ("Seleccione distintas a.number en cuenta un",
                     NULL, [flushMode: FlushMode.MANUAL])
{code}

{hidden}


h2. Description

The @executeQuery@ method allows the execution of arbitrary HQL queries. HQL queries can return domain class instances, or @Array@s of specified data when the query selects individual fields or calculated values. The basic syntax is:

{code:java}
Book.executeQuery(String query)
Book.executeQuery(String query, Collection positionalParams)
Book.executeQuery(String query, Collection positionalParams, Map metaParams)
Book.executeQuery(String query, Map namedParams)
Book.executeQuery(String query, Map namedParams, Map metaParams)
{code}
{hidden}

h2. Descripción

@ ExecuteQuery @ método permite la ejecución de consultas HQL arbitrarias. Consultas HQL pueden devolver instancias de clase de dominio o @ Array@s de datos especificado cuando la consulta selecciona campos individuales o los valores calculados. La sintaxis básica es:

{code: java}
Book.executeQuery (String consulta)
Book.executeQuery (String consulta, colección positionalParams)
Book.executeQuery (String consulta, colección positionalParams, mapa metaParams)
Book.executeQuery (String consulta, mapa namedParams)
Book.executeQuery (String consulta, namedParams mapa, mapa metaParams)
{code}

{hidden}


Parameters:

* @query@ - An HQL query
* @positionalParams@ - A @List@ of parameters for a positional parameterized query
* @namedParams@ - A @Map@ of named parameters for a named parameterized query
* @metaParams@ - A @Map@ of pagination parameters @max@ or/and @offset@, as well as Hibernate query parameters @readOnly@, @fetchSize@, @timeout@, and @flushMode@
{hidden}

Parámetros:

* @ consulta @ - consulta An HQL
* @ positionalParams @ - una lista @ @ de parámetros para una consulta con parámetros posicional
* @ namedParams @ - un mapa @ @ de parámetros con nombre para un nombre con parámetros de consulta
* @ metaParams @ - un mapa @ @ de paginación parámetros @ max @ o / y @ offset @, así como Hibernate consulta parámetros @ readOnly @, @ fetchSize @, @ timeout @ y @ flushMode @
