
{hidden}

h1. findAllBy*

h2. Purpose

Dynamic method that uses the properties of the domain class to create query method expressions that return all matching instances of the domain class

h2. Examples

Given this domain class:

{hidden}

h1. findAllBy *

h2. Fin

Método dinámico que utiliza las propiedades de la clase de dominio para crear expresiones de método que devolución todas las instancias de la clase de dominio coincidentes de consulta

h2. Ejemplos

Dada esta clase de dominio:

{hidden}

{code:java}
class Book {
    String title
    Date releaseDate
    String author
    Boolean paperback
}
{code}

The following are all possible:
{hidden}

{code: java}
clase {libro
    Título de cadena
    Fecha releaseDate
    Autor de cadena
    Rústica booleano
}
{code}

Los siguientes son posibles:

{hidden}


{code:java}
def results = Book.findAllByTitle("The Shining",
                  [max: 10, sort: "title", order: "desc", offset: 100])

results = Book.findAllByTitleAndAuthor("The Sum of All Fears", "Tom Clancy")

results = Book.findAllByReleaseDateBetween(firstDate, new Date())

results = Book.findAllByReleaseDateGreaterThanEquals(firstDate)

results = Book.findAllByTitleLike("%Hobbit%")

results = Book.findAllByTitleIlike("%Hobbit%") // ignore case

results = Book.findAllByTitleNotEqual("Harry Potter")

results = Book.findAllByReleaseDateIsNull()

results = Book.findAllByReleaseDateIsNotNull()

results = Book.findAllPaperbackByAuthor("Douglas Adams")

results = Book.findAllNotPaperbackByAuthor("Douglas Adams")

results = Book.findAllByAuthorInList(["Douglas Adams", "Hunter S. Thompson"])
{code}
{hidden}

{code: java}
resultados de Def = Book.findAllByTitle ("el resplandor",
                  [máx.: 10, tipo: "título", orden: "desc" desplazamiento: 100])

resultados = Book.findAllByTitleAndAuthor ("La suma de todos los miedos", "Tom Clancy")

resultados = Book.findAllByReleaseDateBetween (firstDate, Date()) nueva

resultados = Book.findAllByReleaseDateGreaterThanEquals(firstDate)

resultados = Book.findAllByTitleLike("%Hobbit%")

resultados = Book.findAllByTitleIlike("%Hobbit%") / / ignore caso

resultados = Book.findAllByTitleNotEqual ("Harry Potter")

resultados = Book.findAllByReleaseDateIsNull()

resultados = Book.findAllByReleaseDateIsNotNull()

resultados = Book.findAllPaperbackByAuthor ("Douglas Adams")

resultados = Book.findAllNotPaperbackByAuthor ("Douglas Adams")

resultados = Book.findAllByAuthorInList (["Douglas Adams", "Hunter S. Thompson"])
{code}

{hidden}


h2. Description

GORM supports the notion of [Dynamic Finders|guide:finders]. The @findAllBy*@ method finds all the results for the given method expression.

Parameters:

* @metaParams@ - A @M@ap containing pagination parameters @max@, @order@, @offset@ and @sort@ and metaParameters @readOnly@, @timeout@, @fetchSize@, and @flushMode@

Pagination and sorting parameters can be used as the last argument to a dynamic method:
{hidden}

h2. Descripción

GORM apoya la noción de [dinámico Finders|guide:finders]. El findAllBy @ * @ método encuentra todos los resultados de la expresión de método dado.

Parámetros:

* @ metaParams @ - un M@ap @ que contengan parámetros de paginación @ max @, @ orden @, @ offset @ y @ tipo @ y readOnly @ metaParameters @, @ timeout @, @ fetchSize @ y @ flushMode @

Paginación y parámetros de clasificación pueden utilizarse como último argumento a un método dinámico:

{hidden}


{code:java}
def results = Book.findAllByTitle("The Shining",
                 [max: 10, sort: "title", order: "desc", offset: 100])
{code}

The following operator names can be used within the respective dynamic methods:

* @LessThan@
* @LessThanEquals@
{hidden}

{code: java}
resultados de Def = Book.findAllByTitle ("el resplandor",
                 [máx.: 10, tipo: "título", orden: "desc" desplazamiento: 100])
{code}

Los siguientes nombres de operador pueden utilizarse dentro de los respectivos métodos dinámicos:

* @ Menos @
* @ LessThanEquals @

{hidden}

* @GreaterThan@
* @GreaterThanEquals@
* @Between@
* @Like@
* @Ilike@ (i.e. ignorecase like)
* @IsNotNull@
* @IsNull@
* @Not@
* @NotEqual@
* @And@
{hidden}

* @ GreaterThan @
* @ GreaterThanEquals @
* @ Entre @
* @ Como @
* @ Ilike @ (es decir, ignorecase como)
* @ IsNotNull @
* @ IsNull @
* @ No @
* @ NotEqual @
* @ Y @

{hidden}

* @Or@
* @InList@

These operator names can be considered keywords, and you will run into problems when querying domain classes that have one of these names as property names. For more information on [dynamic finders|guide:finders] refer to the user guide.
{hidden}

* @ O @
* @ InList @

Estos nombres de operador pueden considerarse como palabras clave, y ejecutará en problemas al consultar las clases de dominio que tienen uno de estos nombres como nombres de propiedad. Para obtener más información sobre [finders|guide:finders dinámico] consulte la Guía del usuario.
