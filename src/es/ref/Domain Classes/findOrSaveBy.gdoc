
{hidden}

h1. findOrCreateBy*

h2. Purpose

Dynamic method that uses the properties of the domain class to create query method expressions that return the first result of the query. This method behaves like [findBy|domainClasses] except that it will never return @null@.  If a matching instance cannot be found then a new instance will be created, populated with values represented in the query parameters, saved and returned. The difference between this method and [findOrCreateBy|domainClasses] is that this method will save any newly created instance where [findOrCreateBy|domainClasses] does not.

h2. Examples

Given the domain class @Book@:

{hidden}

h1. findOrCreateBy *

h2. Fin

Método dinámico que utiliza las propiedades de la clase de dominio para crear consulta expresiones de método que devuelven el primer resultado de la consulta. Este método se comporta como [findBy|domainClasses], salvo que nunca devolverá null @ @.  Si una instancia correspondiente no se encuentra entonces una nueva instancia se creado, poblados con valores representados en los parámetros de consulta, guardará y regresó. La diferencia entre este método y [findOrCreateBy|domainClasses] es que este método permitirá ahorrar cualquier instancia recién creada donde no [findOrCreateBy|domainClasses].

h2. Ejemplos

Teniendo en cuenta el clase de dominio @ libro @:

{hidden}

{code:java}
class Book {
   String title
   String author
}
{code}

The following are all possible:

{code:java}
def b = Book.findOrSaveByTitleAndAuthor("The Sum of All Fears", "Tom Clancy")
{code}
{hidden}

{code: java}
clase {libro
   Título de cadena
   Autor de cadena
}
{code}

Los siguientes son posibles:

{code: java}
Def b = Book.findOrSaveByTitleAndAuthor ("La suma de todos los miedos", "Tom Clancy")
{code}

{hidden}


The following are roughly equivalent:

{code:java}
def b = Book.findOrSaveByTitleAndAuthor("The Sum of All Fears", "Tom Clancy")
{code}

{code:java}
def b = Book.findByTitleAndAuthor("The Sum of All Fears", "Tom Clancy")
if (!b) {
    b = new Book(title: "The Sum of All Fears", author: "Tom Clancy")
    b.save()
}
{code}
{hidden}

Son aproximadamente equivalentes:

{code: java}
Def b = Book.findOrSaveByTitleAndAuthor ("La suma de todos los miedos", "Tom Clancy")
{code}

{code: java}
Def b = Book.findByTitleAndAuthor ("La suma de todos los miedos", "Tom Clancy")
Si (! b) {}
    b = nuevo libro (título: "La suma de todos los miedos", autor: "Tom Clancy")
    b.Save()
}
{code}

{hidden}


h2. Description

GORM supports the notion of [Dynamic Finders|guide:finders]. The @findOrSaveBy*@ method finds the first result for the given method expression.

{note}
Because this method potentially creates a new instance and populates properties on that instance, only exact match criteria are allowed.  For example, @Book.findOrSaveByTitle(authorValue)@ is valid but @Book.findOrSaveByAuthorInList(listOfNames)@ is not.
{note}
{hidden}

h2. Descripción

GORM apoya la noción de [dinámico Finders|guide:finders]. El findOrSaveBy @ * @ método busca el primer resultado de la expresión de método dado.

{Nota}
Porque este método potencialmente crea una nueva instancia y rellena las propiedades en esa instancia, criterios de coincidencia exacta sólo están permitidos.  Por ejemplo, @ Book.findOrSaveByTitle(authorValue) @ es válido pero no es @ Book.findOrSaveByAuthorInList(listOfNames) @.
{Nota}
