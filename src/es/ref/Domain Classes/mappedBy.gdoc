
{hidden}

h1. mappedBy

h2. Purpose

The @mappedBy@ static property adds the ability to change how a bidirectional association is linked

h2. Examples

{code:java}
class Airport {

    static mappedBy = [outgoingFlights: 'departureAirport',
                       incomingFlights: 'destinationAirport']

    static hasMany = [outgoingFlights: Route,
                      incomingFlights: Route]
}
{code}
{hidden}

h1. mappedBy

h2. Fin

@ MappedBy @ propiedad estática agrega la capacidad para cambiar cómo se vincula una asociación bidireccional

h2. Ejemplos

{code: java}
clase {Aeropuerto

estático mappedBy = [outgoingFlights: 'departureAirport',
                       incomingFlights: 'destinationAirport']

estático hasMany = [outgoingFlights: ruta,
                      incomingFlights: ruta]
}
{code}

{hidden}


{code:java}
class Route {
    Airport departureAirport
    Airport destinationAirport
}
{code}

In this example the @Airport@ class defines two bidirectional one-to-many associations. Without defining @mappedBy@ this is impossible as GORM cannot differentiate which of the two properties on the other end of the association (either @departureAirport@ or @destinationAirport@ in the @Route@ class) each one-to-many should be associated with.

{hidden}

{code: java}
clase {ruta
    Aeropuerto departureAirport
    Aeropuerto destinationAirport
}
{code}

En este ejemplo el aeropuerto @ @ clase define dos asociaciones de uno a varios bidireccional. Sin definir @ mappedBy @ esto es imposible ya que GORM no puede diferenciar cuál de las dos propiedades en el otro extremo de la Asociación (@ departureAirport @ o @ destinationAirport @ en la ruta @ @ clase) cada uno a muchos debe ser asociado.

{hidden}

The solution is to define @mappedBy@ which tells the @Airport@ class how each association relates to the other side.
{hidden}

La solución consiste en definir @ mappedBy @ que dice el aeropuerto @ @ clase cómo cada asociación se relaciona con el otro lado.
