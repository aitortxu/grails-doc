
{hidden}

h1. merge

h2. Purpose

Merges a domain class instance back into the current persistence context and returns a new merged instance.

h2. Examples

{code:java}
def b = new Book(title: "The Shining")
b = b.merge()
{code}
{hidden}

h1. combinación

h2. Fin

Combina una instancia de la clase de dominio en el actual contexto de persistencia y devuelve una nueva instancia combinada.

h2. Ejemplos

{code: java}
Def b = nuevo libro (título: "El resplandor")
b = b.merge()
{code}

{hidden}


h2. Description

The @merge@ method is similar in function to the [save|domainClasses] method, but not in behaviour. @merge@ allows the merging of "detached" instances such as those stored in the HTTP [session|controllers]. Each persistent instance is associated with a persistence context. A new persistence context is created for each [request|controllers]. The result is that objects stored in the HTTP session lose their persistence context on subsequent requests. In this case you can't simply call [save|domainClasses] as the domain class is not associated with a current context.

The @merge@ method on the other hand lets you merge a detached object's state back into the current Hibernate session. Unlike the @save@ method this method returns a new instance of the class representing the re-attached object. In other words you *must* write code like this:

{code}
book = book.merge()
{code}
{hidden}

h2. Descripción

La combinación de @ @ método es similar en función al método [save|domainClasses], pero no en el comportamiento. @ combinación @ permite la fusión de "destacado" instancias como los almacenados en el HTTP [session|controllers]. Cada instancia persistente está asociado a un contexto de persistencia. Se crea un nuevo contexto de persistencia para cada [request|controllers]. El resultado es que los objetos almacenados en la sesión HTTP pierden su contexto de persistencia en solicitudes posteriores. En este caso no se puede llamar simplemente [save|domainClasses] como la clase de dominio no está asociada a un contexto actual.

La combinación de @ @ método por otro lado le permite combinar el estado de un objeto separado en el actual período de sesiones de la hibernación. A diferencia de guardar @ @ método este método devuelve una nueva instancia de la clase que representa el objeto vuelve a conectar. En otras palabras, usted * debe * escribir código como éste:

{code}
libro = book.merge()
{code}

{hidden}


If you don't use the return value of the @merge@ method then you still have access to the original unmodified detached instance and you will get errors such as lazy initialization exceptions.

The @merge@ method is defined in the Hibernate documentation as follows:

{quote}
Copy the state of the given object onto the persistent object with the same identifier. If there is no persistent instance currently associated with the session, it will be loaded. If the given instance is unsaved, save a copy of and return it as a newly persistent instance.
{quote}

The @merge@ method is equivalent to the Hibernate [merge|api:org.hibernate.Session#merge(java.lang.Object)] method.
{hidden}

Si no utiliza el valor devuelto de la combinación de @ @ método todavía tendrá acceso a la instancia de destacado original sin modificar y obtendrá errores como excepciones de inicialización diferida.

La combinación de @ @ método está definida en la documentación de hibernación como sigue:

oferta de {}
Copiar el estado del objeto especificado en el objeto persistente con el mismo identificador. Si no hay ninguna instancia persistente actualmente asociada con el período de sesiones, se cargará. Si la instancia determinada sin guardar, guardar una copia de y volver como una instancia recién persistente.
oferta de {}

La combinación de @ @ método es equivalente a la hibernación [merge|api:org.hibernate.Session

{hidden}


Parameters:

* @validate@ (optional) - Set to @false@ if validation should be skipped
* @flush@ (optional) - When set to @true@ flushes the persistence context, hence persisting the object immediately
{hidden}

Parámetros:

* @ validar @ (opcional) - establecido en false @ @ si debe omitirse la validación
* @ flush @ (opcional): cuando se establece en true @ @ vuelca el contexto de persistencia, por lo tanto persista el objeto inmediatamente
