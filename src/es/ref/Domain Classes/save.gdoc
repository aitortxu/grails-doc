
{hidden}

h1. save

h2. Purpose

Saves a new domain class instance or updates a modified persistent instance in the database, cascading updates to child instances if required.

h2. Examples

{code:java}
def b = new Book(title: "The Shining")
b.save()
{code}
{hidden}

h1. guardar

h2. Fin

Guarda una nueva instancia de la clase de dominio o actualiza una instancia modificada persistente en la base de datos, conexión en cascada de actualizaciones a las instancias de niño si es necesario.

h2. Ejemplos

{code: java}
Def b = nuevo libro (título: "El resplandor")
b.Save()
{code}

{hidden}


h2. Description

The @save@ method informs the persistence context that an instance should be saved or updated. The object will not be persisted immediately unless the @flush@ argument is used:

{code:java}
b.save(flush: true)
{code}

The @save@ method returns @null@ if [validation|guide:validation] failed and the instance was not persisted, or the instance itself if successful. This lets you use "Groovy truth" (@null@ is considered @false@) to write code like the following:
{hidden}

h2. Descripción

Guardar @ @ método informa el contexto de la persistencia que una instancia debería guardar o actualizada. El objeto no se conservará inmediatamente si no se utiliza el color @ @ argumento:

{code: java}
b.Save(flush: true)
{code}

Guardar @ @ método devuelve null @ @ si falla [validation|guide:validation] y no se conserva la instancia, o la instancia si tiene éxito. Esto le permite utilizar "Verdad Groovy" (@ null @ es considerado falso @ @) para escribir código como el siguiente:

{hidden}


{code:java}
if (!b.save()) {
    b.errors.each {
        println it
    }
}
{code}

Parameters:
{hidden}

{code: java}
Si (! b.save()) {}
    b.Errors.each {}
        Console.println se
    }
}
{code}

Parámetros:

{hidden}


* @validate@ (optional) - Set to @false@ if validation should be skipped
* @flush@ (optional) - When set to @true@ flushes the persistence context, persisting the object immediately and updating the @version@ column for [optimistic locking|guide:locking]
* @insert@ (optional) - When set to @true@ will force Hibernate to do a SQL INSERT; this is useful in certain situations (for example when using assigned ids) and Hibernate cannot detect whether to do an INSERT or an UPDATE
* @failOnError@ (optional) - When set to @true@ the @save@ method with throw a @grails.validation.ValidationException@ if [validation|guide:validation] fails. This behavior may also be triggered by setting the @grails.gorm.failOnError@ property in @grails-app/conf/Config.groovy@. If the Config property is set and the argument is passed to the method, the method argument will always take precedence.  For more details about the config property and other GORM config options, see the [GORM Configuration Options|guide:configGORM] section of The User Guide.
* @deepValidate@ (optional) - Determines whether associations of the domain instance should also be validated, i.e. whether validation cascades. This is @true@ by default - set to @false@ to disable cascading validation.

{note}
By default GORM classes are configured for [optimistic locking|guide:locking], which is a feature of Hibernate that involves storing an incrementing version in the table. This value is only updated in the database when the Hibernate session is flushed.
{note}
{hidden}

* @ validar @ (opcional) - establecido en false @ @ si debe omitirse la validación
* @ flush @ (opcional): cuando se establece en true @ @ vuelca el contexto de persistencia, persiste el objeto inmediatamente y actualizar la versión @ @ columna [locking|guide optimista: bloqueo]
* @ Insertar @ (opcional): cuando se establece en true @ @ obligará a hibernar hacer un INSERT SQL; Esto es útil en determinadas situaciones (por ejemplo, al uso de los identificadores asignados) y Hibernate no puede detectar si se va a hacer una inserción o una actualización
* @ failOnError @ (opcional): cuando se establece en true @ @ guardar @ @ método con tirar un @grails.validation.ValidationException@ si falla [validation|guide:validation]. Este comportamiento también puede activarse mediante la propiedad @grails.gorm.failOnError@ en @ grails-app/conf/Config.groovy@. Si se establece la propiedad de configuración y el argumento se pasa al método, el argumento de método siempre tendrá prioridad.  Para obtener más detalles acerca de la propiedad de configuración y otras opciones de configuración GORM, consulte la sección [GORM configuración Options|guide:configGORM] de la Guía del usuario.
* @ deepValidate @ (opcional): determina si deben validarse también las asociaciones de la instancia de dominio, es decir, si cascadas de validación. Esto es @ cierto @ por defecto-@ falso @ para deshabilitar la validación en cascada.

{Nota}
Clases GORM están configuradas de forma predeterminada para [locking|guide optimista: bloqueo], que es una característica de hibernación que consiste en almacenar una versión aumenta en la tabla. Este valor sólo se actualiza la base de datos cuando se vacía la sesión de Hibernate.
{Nota}
