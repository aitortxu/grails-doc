
{hidden}

h1. filters

h2. Purpose

The @filters@ plugin configures Grails' support for Filters.

h2. Examples

An example filter:

{hidden}

h1. filtros

h2. Fin

Los filtros @ @ plugin configura el soporte de Grails para filtros.

h2. Ejemplos

Un filtro de ejemplo:

{hidden}

{code:java}
class SecurityFilters {
    def filters = {
        loginCheck(controller: '*', action: '*') {
            before = {
                if (!session.user && !actionName.equals('login')) {
                    redirect(action: 'login')
                    return false
                }
            }
        }
    }
}
{code}
{hidden}

{code: java}
clase SecurityFilters {}
    filtros de Def = {}
        loginCheck (controlador: ' *', acción: ' *') {}
            antes = {}
                Si (! session.user

{hidden}


Filter rule attributes:
* @controller@ - controller matching pattern, by default \* is replaced with .\* and a regex is compiled
* @action@ - action matching pattern, by default \* is replaced with .\* and a regex is compiled
* @regex@ (@true@/@false@) - use regex syntax (don't replace '\*' with '.\*')
* @find@ (@true@/@false@) - rule matches with partial match (see @java.util.regex.Matcher.find()@)
* @invert@ (@true@/@false@) - invert the rule (NOT rule)

h2. Description

{hidden}

Atributos de regla de filtro:
* @ controlador @ - controlador de coincidencia de patrón, por defecto \ * es reemplazado con. \ * y se compila un regex
* @ acción @ - acción que coincidan con el patrón, por defecto \ * es reemplazado con. \ * y se compila un regex
* @ regex @ (@ true@/@false @) - utilice la sintaxis regex (no reemplazar ' \ * 'con'. \ *')
* @ Buscar @ (@ true@/@false @) - partidos de regla con parciales coinciden (véase @java.util.regex.Matcher.find()@)
* @ invertir @ (@ true@/@false @) - invertir la regla (no regla)

h2. Descripción

{hidden}

Refer to the section on [Filters|guide:filters] in the Grails user guide which details how filters work.

Configured Spring Beans:

* @filterInterceptor@ - An instance of [CompositeInterceptor|api:org.codehaus.groovy.grails.plugins.web.filters.CompositeInterceptor] that composes all the filters together into a single Spring @Interceptor@.
Configured Spring Beans given a filter called @SecurityFilters@:
* @SecurityFiltersClass@ - The [GrailsFiltersClass|api:org.codehaus.groovy.grails.web.filters.GrailsFiltersClass] instance which aids in analyzing the conventions within the filter.
* @SecurityFilters@ - A singleton reference to the filter itself to support auto-wiring into a Filter
{hidden}

Consulte la sección [Filters|guide:filters] en la Guía de usuario de Grails que detalla cómo funcionan los filtros.

Frijoles de primavera configurados:

* @ filterInterceptor @ - una instancia de [CompositeInterceptor|api:org.codehaus.groovy.grails.plugins.web.filters.CompositeInterceptor] compone todos los filtros juntos en un solo primavera @ Interceptor @.
Configurar frijoles primavera dado un filtro llamado @ SecurityFilters @:
* @ SecurityFiltersClass @ - la instancia [GrailsFiltersClass|api:org.codehaus.groovy.grails.web.filters.GrailsFiltersClass] que ayuda a analizar las convenciones dentro del filtro.
* @ SecurityFilters @ - una referencia singleton del filtro de sí mismo para apoyar el cableado de auto en un filtro
