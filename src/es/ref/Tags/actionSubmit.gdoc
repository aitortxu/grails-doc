
{hidden}

h1. actionSubmit

h2. Purpose

Generates a submit button that maps to a specific action, which lets you have multiple submit buttons in a single form. JavaScript event handlers can be added using the same parameter names as in HTML.

h2. Examples

{code:xml}
<g:actionSubmit value="Update" />

<!--'Update' is action, label is 'Some update label'-->
<g:actionSubmit value="Some update label" action="Update" />

<!--label derived from message bundle-->
<g:actionSubmit value="${message(code:'label.update')}" action="Update" />

<g:actionSubmit value="Delete" />

<g:actionSubmit value="DeleteAll"
                onclick="return confirm('Are you sure???')" />
{code}
{hidden}

h1. actionSubmit

h2. Fin

Genera un botón de envío que se asigna a una acción específica, que le permite tener varios botones de envío en un solo formulario. Pueden agregar controladores de eventos de JavaScript utilizando los mismos nombres de parámetro como en HTML.

h2. Ejemplos

{Código: xml}
<g:actionsubmit value="Update"></g:actionsubmit>

<!--'Update' is action, label is 'Some update label'-->
<g:actionsubmit value="Some update label" action="Update"></g:actionsubmit>

<!--label derived from message bundle-->
<g:actionsubmit value="${message(code:'label.update')}" action="Update"></g:actionsubmit>

<g:actionsubmit value="Delete"></g:actionsubmit>

<g:actionsubmit value="DeleteAll" onclick="return confirm('Are you sure???')"></g:actionsubmit>
{code}

{hidden}


h2. Description

Attributes

* @value@ (required) - The caption of the button and name of action when not explicitly defined.
* @action@ (optional) - The name of the action to be executed, otherwise it is derived from the value.

When you use a normal submit button inside a form, it is the form itself that determines what URL the request is sent to, and therefore what action is executed. However, this tag overrides that behaviour and determines which action is executed. Note that it is still the form that determines the target controller.

{hidden}

h2. Descripción

Atributos

* @ valor @ (requerido) - la leyenda del botón y el nombre de acción cuando no explícitamente definidas.
* @ acción @ (opcional): el nombre de la acción a ser ejecutado, de lo contrario se deriva del valor.

Cuando se utiliza un botón de envío normal dentro de un formulario, es el mismo que determina qué dirección URL de la solicitud se envía al formulario, y por lo tanto, qué acción se ejecuta. Sin embargo, esta etiqueta reemplaza ese comportamiento y determina la acción que se ejecuta. Tenga en cuenta que aún es la forma que determina el controlador de destino.

{hidden}

Due to the way that the tag works, you should not specify an action on the enclosing form unless it is completely necessary. If you do, the URL address in the browser is likely to include the name of the action specified by the form, not the one specified by the @actionSubmit@ tag. In such cases, it is probably a good idea to use custom URL mappings.

h3. URL Mappings

The implementation of the @actionSubmit@ tag means that it does not sit entirely comfortably with URL mappings, particularly the default one. The reason for this is that URL mappings work on the URL of the request, but @actionSubmit@ uses a parameter to determine the action to execute. This means that there is a mismatch between any action name in the URL mapping, and the name of the actual action executed.

Take this simple case with the default URL mapping:

{code}
class UrlMappings {
    static mappings = {
        "/$controller/$action?/$id?"{
            constraints {
                // apply constraints here
            }
        }
    }
}
{code}
{hidden}

Debido a la forma en que funciona la etiqueta, no se debe especificar una acción en forma envolvente a menos que sea completamente necesario. Si lo hace, la dirección URL en el navegador es probable que incluya el nombre de la acción especificada por la forma, no el uno especificado por el @ actionSubmit @ etiqueta. En tales casos, es probablemente una buena idea utilizar asignaciones de dirección URL personalizadas.

h3. Asignaciones de dirección URL

La aplicación de la @ actionSubmit @ etiqueta significa que no quedan totalmente cómodamente con asignaciones de dirección URL, particularmente la predeterminada. La razón de esto es que las asignaciones de dirección URL trabajan en la dirección URL de la solicitud, pero @ actionSubmit @ utiliza un parámetro para determinar la acción a ejecutar. Esto significa que existe un desajuste entre cualquier nombre de acción en la asignación de dirección URL y el nombre de la acción real ejecutado.

Tomar este caso simple con la asignación de dirección URL predeterminada:

{code}
clase UrlMappings {}
    asignaciones estáticas = {}
        "/ acción de controlador /$ $? / id$?"{
            {restricciones
                / / aplicar restricciones aquí
            }
        }
    }
}
{code}

{hidden}


and a GSP page containing this simple form:

{code:xml}
<g:form controller="test">
    <g:actionSubmit value="Submit" action="success"/>
</g:form>
{code}

The URL generated for the @<form>@ element will either be ".../test" or ".../test/index" (assuming "index" is the default action) depending on your version of Grails. Note that neither version includes "success" in the URL, and when you click on the submit button the URL in the browser will be without "success" too.
{hidden}

y una página del SGP que contiene esta forma simple:

{Código: xml}
<g:form controller="test">
    <g:actionsubmit value="Submit" action="success"></g:actionsubmit>
</g:form>
{code}

La dirección URL generada por la @<form>@ elemento va tampoco ser "... y prueba" o ".../test/index" (suponiendo que "índice" es la acción predeterminada) dependiendo de la versión de Grails. Tenga en cuenta que ninguna versión incluye "éxito" en la dirección URL, y al hacer clic en el botón enviar la URL en el navegador será sin "éxito" demasiado.</form>

{hidden}


This isn't too much of a problem when the form URL does not include an action name, but if you have a version of Grails that appends the name of the default action, or you specify an action in your @<g:form>@ tag, then you should probably use a custom URL mapping to hide the action name:

{code}
"/test/submit" {
    controller = "test"
    action = "index"
}
{code}

{hidden}

Esto no es un problema demasiado cuando la dirección URL del formulario no incluye un nombre de acción, pero si tiene una versión de Grails que agrega el nombre de la acción predeterminada, o bien especificar una acción en el @<g:form>@ etiqueta, entonces debería probablemente utilizar una asignación de dirección URL personalizada para ocultar el nombre de acción:

{code}
{"/ prueba/presentar"
    controlador = "test"
    acción = "index"
}
{code}
</g:form>

{hidden}

where the action specified in the mapping is either the default action of the controller, or the action specified in the @<g:form>@ tag.

Also note that this tag relies on the multipart resolver to be able to inspect parameters included with mulitpart requests. If you disable the resolver by setting @grails.disableCommonsMultipart@ to true in @Config.groovy@, @actionSubmit@ will not work.

h2. Source

{source:tag=FormTagLib.actionSubmit}
{source}
{hidden}

Cuando la acción especificada en la asignación sea cualquiera la acción predeterminada del controlador o la acción especificada en el @<g:form>@ etiqueta.

También tenga en cuenta que esta etiqueta se basa en la resolución de varias partes para poder inspeccionar parámetros incluidos con las solicitudes de mulitpart. Si deshabilita a la resolución estableciendo @grails.disableCommonsMultipart@ en true en @ Config.groovy@, @ actionSubmit @ no funcionará.

h2. Fuente

{source:tag=FormTagLib.actionSubmit}
{origen de}</g:form>
