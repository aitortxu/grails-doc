
{hidden}

h1. remoteFunction

h2. Purpose

Creates a remote JavaScript function that can be assigned to a DOM event to call the remote method

h2. Examples

Example controller for an application called @shop@:

{hidden}

h1. remoteFunction

h2. Fin

Crea una función de JavaScript remota que puede asignarse a un evento de DOM para llamar al método remoto

h2. Ejemplos

Controlador de ejemplo de una aplicación llamada @ Tienda @:

{hidden}

{code:java}
class BookController {

    def list() {
        [books: Book.list(params)]
    }

    def show() {
        [book: Book.get(params.id)]
    }

    def bookByName() {
        [book: Book.findByName(params.bookName)]
    }
}
{code}
{hidden}

{code: java}
clase BookController {}

Def list() {}
        [libros: Book.list(params)]
    }

Def show() {}
        [libro: Book.get(params.id)]
    }

Def bookByName() {}
        [libro: Book.findByName(params.bookName)]
    }
}
{code}

{hidden}


Example usages for above controller:

{code:xml}
$('mydiv').onclick = <g:remoteFunction action="show" id="1" />
{code}

Example as a method call in GSP only:

{code:xml}
<select onchange="${remoteFunction(action: 'bookByName',
                       update: [success: 'great', failure: 'ohno'],
                       params: '\\\'bookName=\\\' + this.value')}">
    <option>first</option>
    <option>second</option>
</select>
{code}
{hidden}

Usos de ejemplo por encima de controlador:

{Código: xml}
$('mydiv').OnClick = <g:remotefunction action="show" id="1"></g:remotefunction>
{code}

Ejemplo como una llamada de método en el SPG sólo:

{Código: xml}<select onchange="${remoteFunction(action: 'bookByName',
                       update: [success: 'great', failure: 'ohno'],
                       params: '\\\'bookName=\\\'   this.value')}">
    <option>primera
    <option>segundo
</select>{code}

{hidden}


Example changing the asynchronous option to false:

{code:xml}
<select from="[1,2,3,4,5]" onchange="${remoteFunction(action: 'bookByName',
                                 update: [success: 'great', failure: 'ohno'],
                                 options: '[asynchronous: false]'}" />
{code}

h2. Description
{hidden}

Ejemplo cambiando la opción asincrónica en false:

{Código: xml}<select from="[1,2,3,4,5]" onchange="${remoteFunction(action: 'bookByName',
                                 update: [success: 'great', failure: 'ohno'],
                                 options: '[asynchronous: false]'}"></select>{code}

h2. Descripción

{hidden}


This tag writes a Javascript function call that fires an AJAX request. The exact Javascript used to fire off the AJAX request depends on which Javascript library is used. This tag also requires the use of either the <g:[javascript|tags]/> or <g:[setProvider|tags]/> tags. See the [AJAX section|guide:ajax] of the user guide to find out more.

Attributes

* @action@ (optional) - the name of the action to use in the link; if not specified the default action will be linked
* @controller@ (optional) - the name of the controller to use in the link; if not specified the current controller will be linked
* @id@ (optional) - The id to use in the link
* @update@ (optional) - Either a Map containing the elements to update for 'success' or 'failure' states, or a string with the element id to update, in which case failure events would be ignored
* @before@ (optional) - The JavaScript function to call before the remote function call. A semi-colon is automatically added so you don't have to provide one yourself in this string.
{hidden}

Esta etiqueta escribe una llamada a la función Javascript que se activa una petición AJAX. El Javascript exacto utilizado para disparar la solicitud AJAX depende de qué biblioteca de Javascript se utiliza. Esta etiqueta también requiere el uso de cualquiera de las <g:[javascript|tags]></g:[javascript|tags]> o <g:[setprovider|tags]></g:[setprovider|tags]> etiquetas. Consulte [section|guide:ajax de AJAX] de la Guía del usuario para obtener más información.

Atributos

* @ acción @ (opcional): el nombre de la acción que se utilizan en el enlace; Si no se especifica la acción predeterminada se vincularán
* @ controlador @ (opcional): el nombre del controlador para usar en el enlace; Si no especifica el controlador actual se vincularán
* @ id @ (opcional): el id que se utilizan en el enlace
* @ actualización @ (opcional) - ya sea un mapa que contiene los elementos para la actualización de 'éxito' o 'fracaso' Estados o una cadena con el id de elemento para actualizar, en cuyo caso sucesos de error podrían ignorarse
* @ antes @ (opcional) - JavaScript la función llamar antes de la llamada a función remota. Un punto y coma se agrega automáticamente por lo que no tendrás que proporcionar uno usted mismo en esta cadena.

{hidden}

* @after@ (optional) - The JavaScript function to call after the remote function call. A semi-colon is automatically added so you don't have to provide one yourself in this string.
* @asynchronous@ (optional) - Whether to do the call asynchronously (defaults to @true@, specified in 'options' Map)
* @method@ (optional) - The method to use the execute the call (defaults to POST, specified in 'options' Map)

Events

* @onSuccess@ (optional) - The JavaScript function to call if successful
* @onFailure@ (optional) - The JavaScript function to call if the call fails
* @on_ERROR_CODE@ (optional) - The JavaScript function to call to handle the specified error code (eg on404="alert('not found!')")
* @onUninitialized@ (optional) - The JavaScript function to call if Ajax fails to initialise
{hidden}

* @ después @ (opcional) - JavaScript la función llamar después de la llamada a función remota. Un punto y coma se agrega automáticamente por lo que no tendrás que proporcionar uno usted mismo en esta cadena.
* @ asincrónica @ (opcional): si al hacer la llamada asincrónica (defaults @ True @ especificadas en 'Opciones' mapa)
* @ método @ (opcional): el método a utilizar la ejecución de la llamada (POST, especificada en 'Opciones' mapa de forma predeterminada)

Eventos

* @ onSuccess @ (opcional) - JavaScript la función llamar si es correcto
* @ onFailure @ (opcional) - The JavaScript funcionar si la llamada falla
* @ on_ERROR_CODE @ (opcional) - JavaScript la función llamar para manejar el código de error especificado (p. ej. on404 = "alert ('no encontrado!')")
* @ onUninitialized @ (opcional) - JavaScript la función llamar si Ajax se produce un error al inicializar

{hidden}

* @onLoading@ (optional) - The JavaScript function to call when the remote function loads the response
* @onLoaded@ (optional) - The JavaScript function to call when the remote function completes loading the response
* @onComplete@ (optional) - The JavaScript function to call when the remote function completes, including any updates

h2. Source

{source:tag=JavascriptTagLib.remoteFunction}
{source}
{hidden}

* @ onLoading @ (opcional) - JavaScript la función llamar cuando la función remota carga la respuesta
* @ onLoaded @ (opcional) - JavaScript la función llamar una vez terminada la función remota cargar la respuesta
* @ onComplete @ (opcional) - JavaScript la función llamar cuando finaliza la función remota, incluidas las actualizaciones

h2. Fuente

{source:tag=JavascriptTagLib.remoteFunction}
origen de {}
