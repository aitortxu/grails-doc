
{hidden}

h1. render

h2. Purpose

Applies an inbuilt or user-defined Groovy template against a model so that templates can be shared and reused

h2. Examples

Example domain class:

{hidden}

h1. procesamiento

h2. Fin

Aplica una plantilla Groovy intrínseca o definida por el usuario contra un modelo de modo que pueden compartir y reutilizar plantillas

h2. Ejemplos

Clase de dominio de ejemplo:

{hidden}

{code:java}
class Book {
    String title
    String author
}
{code}

Example template:

{code:java}
<p>${it.title}</p>
<p>${it.author}</p>
{code}
{hidden}

{code: java}
clase {libro
    Título de cadena
    Autor de cadena
}
{code}

Plantilla de ejemplo:

{code: java}<p>${it.title}</p>
<p>${it.author}</p>{code}

{hidden}


This template can now be reused whether you have a @List@ of @Book@s or a single @Book@. For a @List@ the template will be repeated for each instance:

{code:xml}
<g:render template="displaybook" collection="${books}" />
{code}

and for a single instance the template is rendered once:

{code:xml}
<g:render template="displaybook" bean="${book}" />
{code}
{hidden}

Esta plantilla se puede reutilizar ahora si tienes una lista @ de @ Book@s @ o un solo libro @ @. Para obtener una lista @ @ la plantilla se repetirá para cada instancia:

{Código: xml}
<g:render template="displaybook" collection="${books}"></g:render>
{code}

y para una única instancia de la plantilla se procesa una vez:

{Código: xml}
<g:render template="displaybook" bean="${book}"></g:render>
{code}

{hidden}


You can also create a template for a particular type of model. For example this template:

{code:xml}
<p>${book.title}</p>
<p>${author.fullName}</p>
{code}

could be used with this model:

{hidden}

También puede crear una plantilla para un tipo particular de modelo. Por ejemplo esta plantilla:

{Código: xml}<p>${book.title}</p>
<p>${author.fullName}</p>{code}

podría utilizarse con este modelo:

{hidden}

{code:xml}
<g:render template="displaybook" model="['book':book,'author':author]" />
{code}

The disadvantage of this approach is that the template is less reusable.

It is also possible to define the name of the variable to be used by the template in the render tag:

Example template:

{hidden}

{Código: xml}
<g:render template="displaybook" model="['book':book,'author':author]"></g:render>
{code}

La desventaja de este enfoque es que la plantilla es menos reutilizable.

También es posible definir el nombre de la variable que se utilizará la plantilla en la etiqueta de procesamiento:

Plantilla de ejemplo:

{hidden}

{code:java}
<p>${myBook.title}</p>
<p>${myBook.author}</p>
{code}

Example render tag call for the above template

{code:xml}
<g:render template="displaybook" collection="${books}" var="myBook"/>
{code}
{hidden}

{code: java}<p>${myBook.title}</p>
<p>${myBook.author}</p>{code}

Ejemplo de procesamiento llamada de etiqueta para la plantilla anterior

{Código: xml}
<g:render template="displaybook" collection="${books}" var="myBook"></g:render>
{code}

{hidden}


h2. Description

Note that if the value of the template attribute starts with a '/' it will be resolved relative to the views directory. This is useful for sharing templates between views. Without the leading '/' it will be first be resolved relative to the current controller's view directory then, failing that, the top level views directory. In either case the template file must be named with a leading underscore ('_') but referenced in the template attribute without that underscore or the '.gsp' suffix.

Attributes

* @contextPath@ (optional) - the context path to use (relative to the application context path). Defaults to "" or path to the plugin for a plugin view or template.
* @template@ (required) - The name of the template to apply
* @bean@ (optional) - The bean to apply the template against
{hidden}

h2. Descripción

Tenga en cuenta que si el valor del atributo de plantilla se inicia con un '/' se resolverán relativa al directorio de puntos de vista. Esto es útil para compartir plantillas entre vistas. Sin el líder '/' será primero resolverse respecto a la directorio de visualización del controlador actual, fallando que, el nivel superior considera directorio. En cualquier caso el archivo de plantilla debe estar nombrado con un líder subrayado ("_") pero se hace referencia en el atributo de la plantilla sin ese guión bajo o el sufijo '.gsp'.

Atributos

* @ contextPath @ (opcional): la ruta de contexto (relativo a la ruta de acceso de contexto de aplicación). Valor por defecto es "" o ruta de acceso para el plugin para una vista de complemento o plantilla.
* @ plantilla @ (requerido) - el nombre de la plantilla que se aplicará
* @ bean @ (opcional): el grano para aplicar la plantilla contra

{hidden}

* @model@ (optional) - The model to apply the template against as a @java.util.Map@
* @collection@ (optional) - A collection of model objects to apply the template to
* @var@ (optional) - The variable name of the bean to be referenced in the template
* @plugin@ (optional) - The plugin to look for the template in

See [render|controllers] in the user guide for more information.

h2. Source

{source:tag=RenderTagLib.render}
{hidden}

* @ modelo @ (opcional): el modelo para aplicar la plantilla contra como un @java.util.Map@
* @ colección @ (opcional) - una colección de modelo de objetos para aplicar la plantilla
* @ var @ (opcional): el nombre de la variable de frijol que se hace referencia en la plantilla
* @ plugin @ (opcional): el plugin para buscar la plantilla en

En la Guía del usuario para obtener más información, consulte [render|controllers].

h2. Fuente

{source:tag=RenderTagLib.render}

{hidden}

{source}
{hidden}

origen de {}
